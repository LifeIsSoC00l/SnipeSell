{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"qr5rvMnK0AZL"},"outputs":[],"source":["%%capture\n","from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import matplotlib as mpl\n","import matplotlib.pyplot as plt\n","import os\n","import re\n","import shutil\n","import string\n","import seaborn as sns\n","import pydot\n","import pandas as pd\n","import numpy as np\n","\n","from collections import Counter\n","\n","import sklearn\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report\n","from sklearn.preprocessing import OneHotEncoder\n","\n","import tensorflow as tf\n","from tensorflow.keras import regularizers, layers, losses, preprocessing\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":722},"executionInfo":{"elapsed":16651,"status":"ok","timestamp":1645534352065,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"},"user_tz":-60},"id":"es4yJ5OLClF2","outputId":"54d8fb21-e81b-48b3-9c59-f5188608dfba"},"outputs":[{"output_type":"stream","name":"stdout","text":["(612803, 21)\n"]},{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-060778f8-cbdc-4eb7-b688-5538cc3ddeb3\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>llave</th>\n","      <th>id</th>\n","      <th>price</th>\n","      <th>user_type</th>\n","      <th>deal_probability</th>\n","      <th>category</th>\n","      <th>subcategory</th>\n","      <th>city</th>\n","      <th>region</th>\n","      <th>image</th>\n","      <th>description</th>\n","      <th>title</th>\n","      <th>population</th>\n","      <th>wage</th>\n","      <th>federal_district</th>\n","      <th>wage_fd</th>\n","      <th>sold</th>\n","      <th>parent_category</th>\n","      <th>Titulo</th>\n","      <th>Descripcion</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>71fdcaaf5cf2</td>\n","      <td>8.40</td>\n","      <td>Company</td>\n","      <td>0.37064</td>\n","      <td>Tech accessories</td>\n","      <td>For phones</td>\n","      <td>Troitsk</td>\n","      <td>Chelyabinsk region</td>\n","      <td>9ea984545052ffb02c8356c9f5460f58c03fef18507248...</td>\n","      <td>Продам СРОЧНО/\\nГарнитура - Динамики для телеф...</td>\n","      <td>Nokia MD - 8 (Original) Black Edition</td>\n","      <td>3442810</td>\n","      <td>473.496</td>\n","      <td>Ural</td>\n","      <td>723</td>\n","      <td>1</td>\n","      <td>Electronics</td>\n","      <td>nokia md original black edition</td>\n","      <td>продать гарнитура динамика китай оригинал подк...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>e8fd28323e41</td>\n","      <td>1.56</td>\n","      <td>Company</td>\n","      <td>0.16155</td>\n","      <td>Tech accessories</td>\n","      <td>For phones</td>\n","      <td>Yekaterinburg</td>\n","      <td>Sverdlovsk region</td>\n","      <td>dc469d035945552a6fa5d03d5bba2a331a0a4213d72c14...</td>\n","      <td>Зарядное устройство подойдет для любого соврем...</td>\n","      <td>Автомобильное зарядное устройство USB 1А 2А</td>\n","      <td>4290067</td>\n","      <td>512.424</td>\n","      <td>Ural</td>\n","      <td>723</td>\n","      <td>1</td>\n","      <td>Electronics</td>\n","      <td>автомобильный зарядный устройство usb 1а 2а</td>\n","      <td>зарядный устройство подойти любой современный ...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1e6ee485816e</td>\n","      <td>3.00</td>\n","      <td>Private</td>\n","      <td>0.21080</td>\n","      <td>Tech accessories</td>\n","      <td>For phones</td>\n","      <td>Taganrog</td>\n","      <td>Rostov region</td>\n","      <td>ef1760e9c2ae46ef0d652a9e5b74874f44bb0f351b0f3d...</td>\n","      <td>Отличный крепкий чехол для защиты от ударов, о...</td>\n","      <td>Чехол для meizu m5 note</td>\n","      <td>4181486</td>\n","      <td>416.484</td>\n","      <td>Southern</td>\n","      <td>481</td>\n","      <td>1</td>\n","      <td>Electronics</td>\n","      <td>чехол meizu m5 note</td>\n","      <td>отличный крепкий чехол защита удар отлично под...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>d7fbb29cf0d3</td>\n","      <td>12.00</td>\n","      <td>Private</td>\n","      <td>0.33973</td>\n","      <td>Tech accessories</td>\n","      <td>For phones</td>\n","      <td>Rostov-on-Don</td>\n","      <td>Rostov region</td>\n","      <td>9961c32699847a15c6894465bffcc547bea6a71fdc673d...</td>\n","      <td>Продам дисплей на смартфон IPhone 5/\\nТорг/\\nП...</td>\n","      <td>Дисплей на смартфон iPhone 5</td>\n","      <td>4181486</td>\n","      <td>416.484</td>\n","      <td>Southern</td>\n","      <td>481</td>\n","      <td>1</td>\n","      <td>Electronics</td>\n","      <td>дисплей смартфон iphone</td>\n","      <td>продать дисплей смартфон iphone покупка штука ...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>bb231d205c71</td>\n","      <td>3.48</td>\n","      <td>Company</td>\n","      <td>0.26355</td>\n","      <td>Tech accessories</td>\n","      <td>For phones</td>\n","      <td>Ufa</td>\n","      <td>Bashkortostan</td>\n","      <td>46b9cebbe689c1dce3d15b2168f62da7b97b8ea94c3d33...</td>\n","      <td>Аккумулятор для Samsung Galaxy Star Plus Duos ...</td>\n","      <td>Аккумулятор Samsung Galaxy Star Plus Duos GT-S...</td>\n","      <td>4013786</td>\n","      <td>464.628</td>\n","      <td>Volga</td>\n","      <td>479</td>\n","      <td>1</td>\n","      <td>Electronics</td>\n","      <td>аккумулятор samsung galaxy star plus duos</td>\n","      <td>аккумулятор samsung galaxy star plus duos ориг...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-060778f8-cbdc-4eb7-b688-5538cc3ddeb3')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-060778f8-cbdc-4eb7-b688-5538cc3ddeb3 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-060778f8-cbdc-4eb7-b688-5538cc3ddeb3');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["   Unnamed: 0  ...                                        Descripcion\n","0           0  ...  продать гарнитура динамика китай оригинал подк...\n","1           1  ...  зарядный устройство подойти любой современный ...\n","2           2  ...  отличный крепкий чехол защита удар отлично под...\n","3           3  ...  продать дисплей смартфон iphone покупка штука ...\n","4           4  ...  аккумулятор samsung galaxy star plus duos ориг...\n","\n","[5 rows x 21 columns]"]},"metadata":{},"execution_count":4}],"source":["r = \"/content/drive/MyDrive/TFM Big Data & BA/Propuestas/Proyecto Final/2 - Text Mining/df_textm.csv\"\n","df = pd.read_csv(r)\n","\n","# carimg = pd.read_csv(\"/content/drive/MyDrive/TFM Big Data & BA/Propuestas/Proyecto Final/4 - Deep Learning/Image_Dataset_with_Features_Total.txt\", sep = ',')\n","# def nojpg(string):\n","#   return string.split('.jpg')[0]\n","# carimg.image = carimg.image.apply(nojpg)\n","\n","# df = df.merge(carimg, 'left', 'image')\n","\n","# df = df[df.n_segments.notna()]\n","df = df[df[\"Titulo\"].notna()]\n","df = df[df[\"Descripcion\"].notna()]\n","\n","# img_car = ['n_segments', 'contrast_segments_size',\n","#        'ratio_largest_component', 'ratio_second_largest_component',\n","#        'segment_hue_1', 'segment_hue_2', 'segment_hue_3', 'segment_bright_1',\n","#        'segment_bright_2', 'segment_bright_3', 'n_sift', 'rgb_simple_1',\n","#        'rgb_simple_2', 'hsv_simple_1', 'hsv_simple_2', 'hue_hist_1',\n","#        'hue_hist_2', 'hue_hist_3', 'gray_simple_1', 'gray_simple_2',\n","#        'gray_simple_3', 'sharpness', 'contrast', 'colorful', 'sat_1', 'sat_2',\n","#        'sat_3', 'sat_4', 'bright_1', 'bright_2', 'bright_3', 'bright_4']\n","\n","# for i in img_car:\n","#   df[i] = np.where(df[i]==0, 0.0000000001, df[i])\n","\n","print(df.shape)\n","df.head()"]},{"cell_type":"code","source":["fig = plt.figure(figsize=(10,6))\n","fig.set_size_inches(4, 3)\n","plt1 = sns.distplot(df[df[\"sold\"]==0].wage, hist=True, label=\"not sold\")\n","plt2 = sns.distplot(df[df[\"sold\"]==1].wage, hist=True, label=\"sold\")\n","plt.legend(labels=['not sold','sold'])\n","plt.title(\"Titulo\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":330},"id":"wBKZcJU6fH7V","executionInfo":{"status":"ok","timestamp":1645534374131,"user_tz":-60,"elapsed":6570,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"}},"outputId":"c78222a2-f05c-4260-8b15-e17baccc717f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n","  warnings.warn(msg, FutureWarning)\n","/usr/local/lib/python3.7/dist-packages/seaborn/distributions.py:2619: FutureWarning: `distplot` is a deprecated function and will be removed in a future version. Please adapt your code to use either `displot` (a figure-level function with similar flexibility) or `histplot` (an axes-level function for histograms).\n","  warnings.warn(msg, FutureWarning)\n"]},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 288x216 with 1 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"ILWDJ5Ap-7yn"},"source":["# Modelo `snipesell_model`"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"csojeZIl-7jX"},"outputs":[],"source":["# Definición de las X e y de las variables\n","\n","X_train1, X_valid1, y_train1, y_valid1 = train_test_split(df['Titulo'].tolist(), df['sold'].tolist(), test_size=0.25, stratify = df['sold'].tolist(), random_state=0)\n","\n","X_train2, X_valid2, y_train2, y_valid2 = train_test_split(df['Descripcion'].tolist(),\\\n","                                                      df['sold'].tolist(),\\\n","                                                      test_size=0.25,\\\n","                                                      stratify = df['sold'].tolist(),\\\n","                                                      random_state=0)\n","\n","X_trainp, X_validp, y_trainp, y_validp = train_test_split(df['price'].tolist(),\\\n","                                                      df['sold'].tolist(),\\\n","                                                      test_size=0.25,\\\n","                                                      stratify = df['sold'].tolist(),\\\n","                                                      random_state=0)\n","\n","X_trainpo, X_validpo, y_trainpo, y_validpo = train_test_split(df['population'].tolist(),\\\n","                                                      df['sold'].tolist(),\\\n","                                                      test_size=0.25,\\\n","                                                      stratify = df['sold'].tolist(),\\\n","                                                      random_state=0)\n","\n","X_trainw, X_validw, y_trainw, y_validw = train_test_split(df['wage'].tolist(),\\\n","                                                      df['sold'].tolist(),\\\n","                                                      test_size=0.25,\\\n","                                                      stratify = df['sold'].tolist(),\\\n","                                                      random_state=0)\n","\n","df['ratio_wage_fdXregion'] = df['wage_fd']/df['wage']\n","X_trainwfdr, X_validwfdr, y_trainwfdr, y_validwfdr = train_test_split(df['ratio_wage_fdXregion'].tolist(),\\\n","                                                      df['sold'].tolist(),\\\n","                                                      test_size=0.25,\\\n","                                                      stratify = df['sold'].tolist(),\\\n","                                                      random_state=0)\n","\n","X_trainu, X_validu, y_trainu, y_validu = train_test_split(df['user_type'].tolist(),\\\n","                                                      df['sold'].tolist(),\\\n","                                                      test_size=0.25,\\\n","                                                      stratify = df['sold'].tolist(),\\\n","                                                      random_state=0)\n","\n","X_trainpc, X_validpc, y_trainpc, y_validpc = train_test_split(df['category'].tolist(),\\\n","                                                      df['sold'].tolist(),\\\n","                                                      test_size=0.25,\\\n","                                                      stratify = df['sold'].tolist(),\\\n","                                                      random_state=0)\n","\n","X_trainpcs, X_validpcs, y_trainpcs, y_validpcs = train_test_split(df['subcategory'].tolist(),\\\n","                                                      df['sold'].tolist(),\\\n","                                                      test_size=0.25,\\\n","                                                      stratify = df['sold'].tolist(),\\\n","                                                      random_state=0)\n","\n","X_trainr, X_validr, y_trainr, y_validr = train_test_split(df['region'].tolist(),\\\n","                                                      df['sold'].tolist(),\\\n","                                                      test_size=0.25,\\\n","                                                      stratify = df['sold'].tolist(),\\\n","                                                      random_state=0)\n","\n","# Características de imágenes\n","# X_train_n_segments, X_valid_n_segments, y_train_n_segments, y_valid_n_segments = train_test_split(df['n_segments'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)\n","# X_train_contrast_segments_size, X_valid_contrast_segments_size, y_train_contrast_segments_size, y_valid_contrast_segments_size = train_test_split(df['contrast_segments_size'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)\n","# X_train_ratio_largest_component, X_valid_ratio_largest_component, y_train_ratio_largest_component, y_valid_ratio_largest_component = train_test_split(df['ratio_largest_component'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)\n","# X_train_ratio_second_largest_component, X_valid_ratio_second_largest_component, y_train_ratio_second_largest_component, y_valid_ratio_second_largest_component = train_test_split(df['ratio_second_largest_component'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)\n","# X_train_segment_hue_1, X_valid_segment_hue_1, y_train_segment_hue_1, y_valid_segment_hue_1 = train_test_split(df['segment_hue_1'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)\n","# X_train_segment_hue_2, X_valid_segment_hue_2, y_train_segment_hue_2, y_valid_segment_hue_2 = train_test_split(df['segment_hue_2'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)\n","# X_train_segment_hue_3, X_valid_segment_hue_3, y_train_segment_hue_3, y_valid_segment_hue_3 = train_test_split(df['segment_hue_3'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)\n","# X_train_segment_bright_1, X_valid_segment_bright_1, y_train_segment_bright_1, y_valid_segment_bright_1 = train_test_split(df['segment_bright_1'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)\n","# X_train_segment_bright_2, X_valid_segment_bright_2, y_train_segment_bright_2, y_valid_segment_bright_2 = train_test_split(df['segment_bright_2'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)\n","# X_train_segment_bright_3, X_valid_segment_bright_3, y_train_segment_bright_3, y_valid_segment_bright_3 = train_test_split(df['segment_bright_3'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)\n","# X_train_n_sift, X_valid_n_sift, y_train_n_sift, y_valid_n_sift = train_test_split(df['n_sift'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)\n","# X_train_rgb_simple_1, X_valid_rgb_simple_1, y_train_rgb_simple_1, y_valid_rgb_simple_1 = train_test_split(df['rgb_simple_1'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)\n","# X_train_rgb_simple_2, X_valid_rgb_simple_2, y_train_rgb_simple_2, y_valid_rgb_simple_2 = train_test_split(df['rgb_simple_2'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)\n","# X_train_hsv_simple_1, X_valid_hsv_simple_1, y_train_hsv_simple_1, y_valid_hsv_simple_1 = train_test_split(df['hsv_simple_1'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)\n","# X_train_hsv_simple_2, X_valid_hsv_simple_2, y_train_hsv_simple_2, y_valid_hsv_simple_2 = train_test_split(df['hsv_simple_2'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)\n","# X_train_hue_hist_1, X_valid_hue_hist_1, y_train_hue_hist_1, y_valid_hue_hist_1 = train_test_split(df['hue_hist_1'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)\n","# X_train_hue_hist_2, X_valid_hue_hist_2, y_train_hue_hist_2, y_valid_hue_hist_2 = train_test_split(df['hue_hist_2'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)\n","# X_train_hue_hist_3, X_valid_hue_hist_3, y_train_hue_hist_3, y_valid_hue_hist_3 = train_test_split(df['hue_hist_3'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)\n","# X_train_gray_simple_1, X_valid_gray_simple_1, y_train_gray_simple_1, y_valid_gray_simple_1 = train_test_split(df['gray_simple_1'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)\n","# X_train_gray_simple_2, X_valid_gray_simple_2, y_train_gray_simple_2, y_valid_gray_simple_2 = train_test_split(df['gray_simple_2'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)\n","# X_train_gray_simple_3, X_valid_gray_simple_3, y_train_gray_simple_3, y_valid_gray_simple_3 = train_test_split(df['gray_simple_3'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)\n","# X_train_sharpness, X_valid_sharpness, y_train_sharpness, y_valid_sharpness = train_test_split(df['sharpness'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)\n","# X_train_contrast, X_valid_contrast, y_train_contrast, y_valid_contrast = train_test_split(df['contrast'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)\n","# X_train_colorful, X_valid_colorful, y_train_colorful, y_valid_colorful = train_test_split(df['colorful'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)\n","# X_train_sat_1, X_valid_sat_1, y_train_sat_1, y_valid_sat_1 = train_test_split(df['sat_1'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)\n","# X_train_sat_2, X_valid_sat_2, y_train_sat_2, y_valid_sat_2 = train_test_split(df['sat_2'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)\n","# X_train_sat_3, X_valid_sat_3, y_train_sat_3, y_valid_sat_3 = train_test_split(df['sat_3'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)\n","# X_train_sat_4, X_valid_sat_4, y_train_sat_4, y_valid_sat_4 = train_test_split(df['sat_4'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)\n","# X_train_bright_1, X_valid_bright_1, y_train_bright_1, y_valid_bright_1 = train_test_split(df['bright_1'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)\n","# X_train_bright_2, X_valid_bright_2, y_train_bright_2, y_valid_bright_2 = train_test_split(df['bright_2'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)\n","# X_train_bright_3, X_valid_bright_3, y_train_bright_3, y_valid_bright_3 = train_test_split(df['bright_3'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)\n","# X_train_bright_4, X_valid_bright_4, y_train_bright_4, y_valid_bright_4 = train_test_split(df['bright_4'].tolist(),df['sold'].tolist(),test_size=0.25,stratify = df['sold'].tolist(),random_state=0)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dJ1_jKsJ_KBw"},"outputs":[],"source":["# Definición de los tokenizadores\n","\n","num_words = 50000\n","\n","tokenizer1 = Tokenizer(num_words=num_words)\n","tokenizer1.fit_on_texts(X_train1)\n","tokenizer2 = Tokenizer(num_words=num_words)\n","tokenizer2.fit_on_texts(X_train2)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":41993,"status":"ok","timestamp":1645287492924,"user":{"displayName":"Ignacio Esplugues","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgCep0Hg7lhNSzfiPq203jW5skF0VO_1lqfA8OkLA=s64","userId":"01341933973910047413"},"user_tz":-60},"id":"0mydZWkM_VaP","outputId":"f2208dd7-74b0-45a5-e478-e4a532fa66be"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:17: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:18: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n"]}],"source":["# Tokenización de variables de texto\n","\n","# 'title'\n","x_train1 = np.array(tokenizer1.texts_to_sequences(X_train1))\n","x_valid1 = np.array(tokenizer1.texts_to_sequences(X_valid1))\n","\n","x_train1 = pad_sequences(x_train1, padding='post', maxlen=100)\n","x_valid1 = pad_sequences(x_valid1, padding='post', maxlen=100)\n","\n","train_labels1 = np.asarray(y_train1)\n","valid_labels1 = np.asarray(y_valid1)\n","\n","train_ds1 = tf.data.Dataset.from_tensor_slices((x_train1, train_labels1))\n","valid_ds1 = tf.data.Dataset.from_tensor_slices((x_valid1, valid_labels1))\n","\n","# 'description'\n","x_train2 = np.array(tokenizer2.texts_to_sequences(X_train2))\n","x_valid2 = np.array(tokenizer2.texts_to_sequences(X_valid2))\n","\n","x_train2 = pad_sequences(x_train2, padding='post', maxlen=100)\n","x_valid2 = pad_sequences(x_valid2, padding='post', maxlen=100)\n","\n","train_labels2 = np.asarray(y_train2)\n","valid_labels2 = np.asarray(y_valid2)\n","\n","train_ds2 = tf.data.Dataset.from_tensor_slices((x_train2, train_labels2))\n","valid_ds2 = tf.data.Dataset.from_tensor_slices((x_valid2, valid_labels2))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eJMfIvUkimMy"},"outputs":[],"source":["# Formateo de variables numéricas (np.log)\n","\n","x_trainp = np.asarray(pd.DataFrame(X_trainp).apply(np.log))\n","x_validp = np.asarray(pd.DataFrame(X_validp).apply(np.log))\n","train_labelsp = np.asarray(pd.DataFrame(y_trainp).apply(np.log))\n","valid_labelsp = np.asarray(pd.DataFrame(y_validp).apply(np.log))\n","\n","x_trainpo = np.asarray(pd.DataFrame(X_trainpo).apply(np.log))\n","x_validpo = np.asarray(pd.DataFrame(X_validpo).apply(np.log))\n","train_labelspo = np.asarray(pd.DataFrame(y_trainpo).apply(np.log))\n","valid_labelspo = np.asarray(pd.DataFrame(y_validpo).apply(np.log))\n","\n","x_trainw = np.asarray(pd.DataFrame(X_trainw).apply(np.log))\n","x_validw = np.asarray(pd.DataFrame(X_validw).apply(np.log))\n","train_labelsw = np.asarray(pd.DataFrame(y_trainw).apply(np.log))\n","valid_labelsw = np.asarray(pd.DataFrame(y_validw).apply(np.log))\n","\n","# Características de imágenes\n","# x_train_n_segments = np.asarray(pd.DataFrame(X_train_n_segments).apply(np.log))\n","# x_valid_n_segments = np.asarray(pd.DataFrame(X_valid_n_segments).apply(np.log))\n","# train_labels_n_segments = np.asarray(pd.DataFrame(y_train_n_segments).apply(np.log))\n","# valid_labels_n_segments = np.asarray(pd.DataFrame(y_valid_n_segments).apply(np.log))\n","\n","# x_train_contrast_segments_size = np.asarray(pd.DataFrame(X_train_contrast_segments_size).apply(np.log))\n","# x_valid_contrast_segments_size = np.asarray(pd.DataFrame(X_valid_contrast_segments_size).apply(np.log))\n","# train_labels_contrast_segments_size = np.asarray(pd.DataFrame(y_train_contrast_segments_size).apply(np.log))\n","# valid_labels_contrast_segments_size = np.asarray(pd.DataFrame(y_valid_contrast_segments_size).apply(np.log))\n","\n","# x_train_ratio_largest_component = np.asarray(pd.DataFrame(X_train_ratio_largest_component).apply(np.log))\n","# x_valid_ratio_largest_component = np.asarray(pd.DataFrame(X_valid_ratio_largest_component).apply(np.log))\n","# train_labels_ratio_largest_component = np.asarray(pd.DataFrame(y_train_ratio_largest_component).apply(np.log))\n","# valid_labels_ratio_largest_component = np.asarray(pd.DataFrame(y_valid_ratio_largest_component).apply(np.log))\n","\n","# x_train_ratio_second_largest_component = np.asarray(pd.DataFrame(X_train_ratio_second_largest_component).apply(np.log))\n","# x_valid_ratio_second_largest_component = np.asarray(pd.DataFrame(X_valid_ratio_second_largest_component).apply(np.log))\n","# train_labels_ratio_second_largest_component = np.asarray(pd.DataFrame(y_train_ratio_second_largest_component).apply(np.log))\n","# valid_labels_ratio_second_largest_component = np.asarray(pd.DataFrame(y_valid_ratio_second_largest_component).apply(np.log))\n","\n","# x_train_segment_hue_1 = np.asarray(pd.DataFrame(X_train_segment_hue_1).apply(np.log))\n","# x_valid_segment_hue_1 = np.asarray(pd.DataFrame(X_valid_segment_hue_1).apply(np.log))\n","# train_labels_segment_hue_1 = np.asarray(pd.DataFrame(y_train_segment_hue_1).apply(np.log))\n","# valid_labels_segment_hue_1 = np.asarray(pd.DataFrame(y_valid_segment_hue_1).apply(np.log))\n","\n","# x_train_segment_hue_2 = np.asarray(pd.DataFrame(X_train_segment_hue_2).apply(np.log))\n","# x_valid_segment_hue_2 = np.asarray(pd.DataFrame(X_valid_segment_hue_2).apply(np.log))\n","# train_labels_segment_hue_2 = np.asarray(pd.DataFrame(y_train_segment_hue_2).apply(np.log))\n","# valid_labels_segment_hue_2 = np.asarray(pd.DataFrame(y_valid_segment_hue_2).apply(np.log))\n","\n","# x_train_segment_hue_3 = np.asarray(pd.DataFrame(X_train_segment_hue_3).apply(np.log))\n","# x_valid_segment_hue_3 = np.asarray(pd.DataFrame(X_valid_segment_hue_3).apply(np.log))\n","# train_labels_segment_hue_3 = np.asarray(pd.DataFrame(y_train_segment_hue_3).apply(np.log))\n","# valid_labels_segment_hue_3 = np.asarray(pd.DataFrame(y_valid_segment_hue_3).apply(np.log))\n","\n","# x_train_segment_bright_1 = np.asarray(pd.DataFrame(X_train_segment_bright_1).apply(np.log))\n","# x_valid_segment_bright_1 = np.asarray(pd.DataFrame(X_valid_segment_bright_1).apply(np.log))\n","# train_labels_segment_bright_1 = np.asarray(pd.DataFrame(y_train_segment_bright_1).apply(np.log))\n","# valid_labels_segment_bright_1 = np.asarray(pd.DataFrame(y_valid_segment_bright_1).apply(np.log))\n","\n","# x_train_segment_bright_2 = np.asarray(pd.DataFrame(X_train_segment_bright_2).apply(np.log))\n","# x_valid_segment_bright_2 = np.asarray(pd.DataFrame(X_valid_segment_bright_2).apply(np.log))\n","# train_labels_segment_bright_2 = np.asarray(pd.DataFrame(y_train_segment_bright_2).apply(np.log))\n","# valid_labels_segment_bright_2 = np.asarray(pd.DataFrame(y_valid_segment_bright_2).apply(np.log))\n","\n","# x_train_segment_bright_3 = np.asarray(pd.DataFrame(X_train_segment_bright_3).apply(np.log))\n","# x_valid_segment_bright_3 = np.asarray(pd.DataFrame(X_valid_segment_bright_3).apply(np.log))\n","# train_labels_segment_bright_3 = np.asarray(pd.DataFrame(y_train_segment_bright_3).apply(np.log))\n","# valid_labels_segment_bright_3 = np.asarray(pd.DataFrame(y_valid_segment_bright_3).apply(np.log))\n","\n","# x_train_n_sift = np.asarray(pd.DataFrame(X_train_n_sift).apply(np.log))\n","# x_valid_n_sift = np.asarray(pd.DataFrame(X_valid_n_sift).apply(np.log))\n","# train_labels_n_sift = np.asarray(pd.DataFrame(y_train_n_sift).apply(np.log))\n","# valid_labels_n_sift = np.asarray(pd.DataFrame(y_valid_n_sift).apply(np.log))\n","\n","# x_train_rgb_simple_1 = np.asarray(pd.DataFrame(X_train_rgb_simple_1).apply(np.log))\n","# x_valid_rgb_simple_1 = np.asarray(pd.DataFrame(X_valid_rgb_simple_1).apply(np.log))\n","# train_labels_rgb_simple_1 = np.asarray(pd.DataFrame(y_train_rgb_simple_1).apply(np.log))\n","# valid_labels_rgb_simple_1 = np.asarray(pd.DataFrame(y_valid_rgb_simple_1).apply(np.log))\n","\n","# x_train_rgb_simple_2 = np.asarray(pd.DataFrame(X_train_rgb_simple_2).apply(np.log))\n","# x_valid_rgb_simple_2 = np.asarray(pd.DataFrame(X_valid_rgb_simple_2).apply(np.log))\n","# train_labels_rgb_simple_2 = np.asarray(pd.DataFrame(y_train_rgb_simple_2).apply(np.log))\n","# valid_labels_rgb_simple_2 = np.asarray(pd.DataFrame(y_valid_rgb_simple_2).apply(np.log))\n","\n","# x_train_hsv_simple_1 = np.asarray(pd.DataFrame(X_train_hsv_simple_1).apply(np.log))\n","# x_valid_hsv_simple_1 = np.asarray(pd.DataFrame(X_valid_hsv_simple_1).apply(np.log))\n","# train_labels_hsv_simple_1 = np.asarray(pd.DataFrame(y_train_hsv_simple_1).apply(np.log))\n","# valid_labels_hsv_simple_1 = np.asarray(pd.DataFrame(y_valid_hsv_simple_1).apply(np.log))\n","\n","# x_train_hsv_simple_2 = np.asarray(pd.DataFrame(X_train_hsv_simple_2).apply(np.log))\n","# x_valid_hsv_simple_2 = np.asarray(pd.DataFrame(X_valid_hsv_simple_2).apply(np.log))\n","# train_labels_hsv_simple_2 = np.asarray(pd.DataFrame(y_train_hsv_simple_2).apply(np.log))\n","# valid_labels_hsv_simple_2 = np.asarray(pd.DataFrame(y_valid_hsv_simple_2).apply(np.log))\n","\n","# x_train_hue_hist_1 = np.asarray(pd.DataFrame(X_train_hue_hist_1).apply(np.log))\n","# x_valid_hue_hist_1 = np.asarray(pd.DataFrame(X_valid_hue_hist_1).apply(np.log))\n","# train_labels_hue_hist_1 = np.asarray(pd.DataFrame(y_train_hue_hist_1).apply(np.log))\n","# valid_labels_hue_hist_1 = np.asarray(pd.DataFrame(y_valid_hue_hist_1).apply(np.log))\n","\n","# x_train_hue_hist_2 = np.asarray(pd.DataFrame(X_train_hue_hist_2).apply(np.log))\n","# x_valid_hue_hist_2 = np.asarray(pd.DataFrame(X_valid_hue_hist_2).apply(np.log))\n","# train_labels_hue_hist_2 = np.asarray(pd.DataFrame(y_train_hue_hist_2).apply(np.log))\n","# valid_labels_hue_hist_2 = np.asarray(pd.DataFrame(y_valid_hue_hist_2).apply(np.log))\n","\n","# x_train_hue_hist_3 = np.asarray(pd.DataFrame(X_train_hue_hist_3).apply(np.log))\n","# x_valid_hue_hist_3 = np.asarray(pd.DataFrame(X_valid_hue_hist_3).apply(np.log))\n","# train_labels_hue_hist_3 = np.asarray(pd.DataFrame(y_train_hue_hist_3).apply(np.log))\n","# valid_labels_hue_hist_3 = np.asarray(pd.DataFrame(y_valid_hue_hist_3).apply(np.log))\n","\n","# x_train_gray_simple_1 = np.asarray(pd.DataFrame(X_train_gray_simple_1).apply(np.log))\n","# x_valid_gray_simple_1 = np.asarray(pd.DataFrame(X_valid_gray_simple_1).apply(np.log))\n","# train_labels_gray_simple_1 = np.asarray(pd.DataFrame(y_train_gray_simple_1).apply(np.log))\n","# valid_labels_gray_simple_1 = np.asarray(pd.DataFrame(y_valid_gray_simple_1).apply(np.log))\n","\n","# x_train_gray_simple_2 = np.asarray(pd.DataFrame(X_train_gray_simple_2).apply(np.log))\n","# x_valid_gray_simple_2 = np.asarray(pd.DataFrame(X_valid_gray_simple_2).apply(np.log))\n","# train_labels_gray_simple_2 = np.asarray(pd.DataFrame(y_train_gray_simple_2).apply(np.log))\n","# valid_labels_gray_simple_2 = np.asarray(pd.DataFrame(y_valid_gray_simple_2).apply(np.log))\n","\n","# x_train_gray_simple_3 = np.asarray(pd.DataFrame(X_train_gray_simple_3).apply(np.log))\n","# x_valid_gray_simple_3 = np.asarray(pd.DataFrame(X_valid_gray_simple_3).apply(np.log))\n","# train_labels_gray_simple_3 = np.asarray(pd.DataFrame(y_train_gray_simple_3).apply(np.log))\n","# valid_labels_gray_simple_3 = np.asarray(pd.DataFrame(y_valid_gray_simple_3).apply(np.log))\n","\n","# x_train_sharpness = np.asarray(pd.DataFrame(X_train_sharpness).apply(np.log))\n","# x_valid_sharpness = np.asarray(pd.DataFrame(X_valid_sharpness).apply(np.log))\n","# train_labels_sharpness = np.asarray(pd.DataFrame(y_train_sharpness).apply(np.log))\n","# valid_labels_sharpness = np.asarray(pd.DataFrame(y_valid_sharpness).apply(np.log))\n","\n","# x_train_contrast = np.asarray(pd.DataFrame(X_train_contrast).apply(np.log))\n","# x_valid_contrast = np.asarray(pd.DataFrame(X_valid_contrast).apply(np.log))\n","# train_labels_contrast = np.asarray(pd.DataFrame(y_train_contrast).apply(np.log))\n","# valid_labels_contrast = np.asarray(pd.DataFrame(y_valid_contrast).apply(np.log))\n","\n","# x_train_colorful = np.asarray(pd.DataFrame(X_train_colorful).apply(np.log))\n","# x_valid_colorful = np.asarray(pd.DataFrame(X_valid_colorful).apply(np.log))\n","# train_labels_colorful = np.asarray(pd.DataFrame(y_train_colorful).apply(np.log))\n","# valid_labels_colorful = np.asarray(pd.DataFrame(y_valid_colorful).apply(np.log))\n","\n","# x_train_sat_1 = np.asarray(pd.DataFrame(X_train_sat_1).apply(np.log))\n","# x_valid_sat_1 = np.asarray(pd.DataFrame(X_valid_sat_1).apply(np.log))\n","# train_labels_sat_1 = np.asarray(pd.DataFrame(y_train_sat_1).apply(np.log))\n","# valid_labels_sat_1 = np.asarray(pd.DataFrame(y_valid_sat_1).apply(np.log))\n","\n","# x_train_sat_2 = np.asarray(pd.DataFrame(X_train_sat_2).apply(np.log))\n","# x_valid_sat_2 = np.asarray(pd.DataFrame(X_valid_sat_2).apply(np.log))\n","# train_labels_sat_2 = np.asarray(pd.DataFrame(y_train_sat_2).apply(np.log))\n","# valid_labels_sat_2 = np.asarray(pd.DataFrame(y_valid_sat_2).apply(np.log))\n","\n","# x_train_sat_3 = np.asarray(pd.DataFrame(X_train_sat_3).apply(np.log))\n","# x_valid_sat_3 = np.asarray(pd.DataFrame(X_valid_sat_3).apply(np.log))\n","# train_labels_sat_3 = np.asarray(pd.DataFrame(y_train_sat_3).apply(np.log))\n","# valid_labels_sat_3 = np.asarray(pd.DataFrame(y_valid_sat_3).apply(np.log))\n","\n","# x_train_sat_4 = np.asarray(pd.DataFrame(X_train_sat_4).apply(np.log))\n","# x_valid_sat_4 = np.asarray(pd.DataFrame(X_valid_sat_4).apply(np.log))\n","# train_labels_sat_4 = np.asarray(pd.DataFrame(y_train_sat_4).apply(np.log))\n","# valid_labels_sat_4 = np.asarray(pd.DataFrame(y_valid_sat_4).apply(np.log))\n","\n","# x_train_bright_1 = np.asarray(pd.DataFrame(X_train_bright_1).apply(np.log))\n","# x_valid_bright_1 = np.asarray(pd.DataFrame(X_valid_bright_1).apply(np.log))\n","# train_labels_bright_1 = np.asarray(pd.DataFrame(y_train_bright_1).apply(np.log))\n","# valid_labels_bright_1 = np.asarray(pd.DataFrame(y_valid_bright_1).apply(np.log))\n","\n","# x_train_bright_2 = np.asarray(pd.DataFrame(X_train_bright_2).apply(np.log))\n","# x_valid_bright_2 = np.asarray(pd.DataFrame(X_valid_bright_2).apply(np.log))\n","# train_labels_bright_2 = np.asarray(pd.DataFrame(y_train_bright_2).apply(np.log))\n","# valid_labels_bright_2 = np.asarray(pd.DataFrame(y_valid_bright_2).apply(np.log))\n","\n","# x_train_bright_3 = np.asarray(pd.DataFrame(X_train_bright_3).apply(np.log))\n","# x_valid_bright_3 = np.asarray(pd.DataFrame(X_valid_bright_3).apply(np.log))\n","# train_labels_bright_3 = np.asarray(pd.DataFrame(y_train_bright_3).apply(np.log))\n","# valid_labels_bright_3 = np.asarray(pd.DataFrame(y_valid_bright_3).apply(np.log))\n","\n","# x_train_bright_4 = np.asarray(pd.DataFrame(X_train_bright_4).apply(np.log))\n","# x_valid_bright_4 = np.asarray(pd.DataFrame(X_valid_bright_4).apply(np.log))\n","# train_labels_bright_4 = np.asarray(pd.DataFrame(y_train_bright_4).apply(np.log))\n","# valid_labels_bright_4 = np.asarray(pd.DataFrame(y_valid_bright_4).apply(np.log))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qCeVK6hfiTQC"},"outputs":[],"source":["# Formateo de variables categóricas\n","\n","oe_style = OneHotEncoder()\n","\n","x_trainu = pd.DataFrame(X_trainu)\n","oe_results = oe_style.fit_transform(x_trainu[[0]])\n","x_trainu = oe_results.toarray()\n","\n","x_trainpc = pd.DataFrame(X_trainpc)\n","oe_results = oe_style.fit_transform(x_trainpc[[0]])\n","x_trainpc = oe_results.toarray()\n","\n","x_trainpcs = pd.DataFrame(X_trainpcs)\n","oe_results = oe_style.fit_transform(x_trainpcs[[0]])\n","x_trainpcs = oe_results.toarray()\n","\n","x_trainr = pd.DataFrame(X_trainr)\n","oe_results = oe_style.fit_transform(x_trainr[[0]])\n","x_trainr = oe_results.toarray()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1071,"status":"ok","timestamp":1645287496345,"user":{"displayName":"Ignacio Esplugues","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgCep0Hg7lhNSzfiPq203jW5skF0VO_1lqfA8OkLA=s64","userId":"01341933973910047413"},"user_tz":-60},"id":"th2lGgxG_lkm","outputId":"38e86766-7f96-4a10-9bd4-c11dadb343b3"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"snipesell_model\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," title_input (InputLayer)       [(None, 100)]        0           []                               \n","                                                                                                  \n"," desc_input (InputLayer)        [(None, 100)]        0           []                               \n","                                                                                                  \n"," user_input (InputLayer)        [(None, 3)]          0           []                               \n","                                                                                                  \n"," category_input (InputLayer)    [(None, 14)]         0           []                               \n","                                                                                                  \n"," subcategory_input (InputLayer)  [(None, 111)]       0           []                               \n","                                                                                                  \n"," region_input (InputLayer)      [(None, 28)]         0           []                               \n","                                                                                                  \n"," embedding (Embedding)          (None, 100, 16)      800016      ['title_input[0][0]']            \n","                                                                                                  \n"," embedding_1 (Embedding)        (None, 100, 16)      800016      ['desc_input[0][0]']             \n","                                                                                                  \n"," embedding_2 (Embedding)        (None, 3, 16)        800016      ['user_input[0][0]']             \n","                                                                                                  \n"," embedding_3 (Embedding)        (None, 14, 16)       800016      ['category_input[0][0]']         \n","                                                                                                  \n"," embedding_4 (Embedding)        (None, 111, 16)      800016      ['subcategory_input[0][0]']      \n","                                                                                                  \n"," embedding_5 (Embedding)        (None, 28, 16)       800016      ['region_input[0][0]']           \n","                                                                                                  \n"," tf.concat (TFOpLambda)         (None, 356, 16)      0           ['embedding[0][0]',              \n","                                                                  'embedding_1[0][0]',            \n","                                                                  'embedding_2[0][0]',            \n","                                                                  'embedding_3[0][0]',            \n","                                                                  'embedding_4[0][0]',            \n","                                                                  'embedding_5[0][0]']            \n","                                                                                                  \n"," layer_1 (Dense)                (None, 356, 128)     2176        ['tf.concat[0][0]']              \n","                                                                                                  \n"," precio_input (InputLayer)      [(None, 1)]          0           []                               \n","                                                                                                  \n"," flatten (Flatten)              (None, 45568)        0           ['layer_1[0][0]']                \n","                                                                                                  \n"," layer_precio (Dense)           (None, 128)          256         ['precio_input[0][0]']           \n","                                                                                                  \n"," tf.concat_1 (TFOpLambda)       (None, 45696)        0           ['flatten[0][0]',                \n","                                                                  'layer_precio[0][0]']           \n","                                                                                                  \n"," layer_3 (Dense)                (None, 128)          5849216     ['tf.concat_1[0][0]']            \n","                                                                                                  \n"," population_input (InputLayer)  [(None, 1)]          0           []                               \n","                                                                                                  \n"," flatten_1 (Flatten)            (None, 128)          0           ['layer_3[0][0]']                \n","                                                                                                  \n"," layer_population (Dense)       (None, 128)          256         ['population_input[0][0]']       \n","                                                                                                  \n"," tf.concat_2 (TFOpLambda)       (None, 256)          0           ['flatten_1[0][0]',              \n","                                                                  'layer_population[0][0]']       \n","                                                                                                  \n"," layer_5 (Dense)                (None, 128)          32896       ['tf.concat_2[0][0]']            \n","                                                                                                  \n"," wage_input (InputLayer)        [(None, 1)]          0           []                               \n","                                                                                                  \n"," flatten_2 (Flatten)            (None, 128)          0           ['layer_5[0][0]']                \n","                                                                                                  \n"," layer_wage (Dense)             (None, 128)          256         ['wage_input[0][0]']             \n","                                                                                                  \n"," tf.concat_3 (TFOpLambda)       (None, 256)          0           ['flatten_2[0][0]',              \n","                                                                  'layer_wage[0][0]']             \n","                                                                                                  \n"," layer_7 (Dense)                (None, 128)          32896       ['tf.concat_3[0][0]']            \n","                                                                                                  \n"," ratio_wage_input (InputLayer)  [(None, 1)]          0           []                               \n","                                                                                                  \n"," flatten_3 (Flatten)            (None, 128)          0           ['layer_7[0][0]']                \n","                                                                                                  \n"," layer_ratio_wage (Dense)       (None, 128)          256         ['ratio_wage_input[0][0]']       \n","                                                                                                  \n"," tf.concat_4 (TFOpLambda)       (None, 256)          0           ['flatten_3[0][0]',              \n","                                                                  'layer_ratio_wage[0][0]']       \n","                                                                                                  \n"," layer_9 (Dense)                (None, 128)          32896       ['tf.concat_4[0][0]']            \n","                                                                                                  \n"," output (Dense)                 (None, 1)            129         ['layer_9[0][0]']                \n","                                                                                                  \n","==================================================================================================\n","Total params: 10,751,329\n","Trainable params: 10,751,329\n","Non-trainable params: 0\n","__________________________________________________________________________________________________\n"]}],"source":["max_features = 50000\n","embedding_dim = 16\n","sequence_length = 100\n","\n","# Inputs\n","title_input = tf.keras.layers.Input(shape=(100, ), name='title_input')\n","desc_input = tf.keras.layers.Input(shape=(100, ), name='desc_input')\n","user_input = tf.keras.layers.Input(shape=(3, ), name='user_input')\n","category_input = tf.keras.layers.Input(shape=(14, ), name='category_input') # 10 con características de imágenes\n","subcategory_input = tf.keras.layers.Input(shape=(111, ), name='subcategory_input') # 89 con características de imágenes\n","region_input = tf.keras.layers.Input(shape=(28, ), name='region_input')\n","precio_input = tf.keras.layers.Input(shape=(1, ), name='precio_input')\n","population_input = tf.keras.layers.Input(shape=(1, ), name='population_input')\n","wage_input = tf.keras.layers.Input(shape=(1, ), name='wage_input')\n","ratio_wage_input = tf.keras.layers.Input(shape=(1, ), name='ratio_wage_input')\n","\n","# n_segments_input = tf.keras.layers.Input(shape=(1, ), name='n_segments_input')\n","# contrast_segments_size_input = tf.keras.layers.Input(shape=(1, ), name='contrast_segments_size_input')\n","# ratio_largest_component_input = tf.keras.layers.Input(shape=(1, ), name='ratio_largest_component_input')\n","# ratio_second_largest_component_input = tf.keras.layers.Input(shape=(1, ), name='ratio_second_largest_component_input')\n","# segment_hue_1_input = tf.keras.layers.Input(shape=(1, ), name='segment_hue_1_input')\n","# segment_hue_2_input = tf.keras.layers.Input(shape=(1, ), name='segment_hue_2_input')\n","# segment_hue_3_input = tf.keras.layers.Input(shape=(1, ), name='segment_hue_3_input')\n","# segment_bright_1_input = tf.keras.layers.Input(shape=(1, ), name='segment_bright_1_input')\n","# segment_bright_2_input = tf.keras.layers.Input(shape=(1, ), name='segment_bright_2_input')\n","# segment_bright_3_input = tf.keras.layers.Input(shape=(1, ), name='segment_bright_3_input')\n","# n_sift_input = tf.keras.layers.Input(shape=(1, ), name='n_sift_input')\n","# rgb_simple_1_input = tf.keras.layers.Input(shape=(1, ), name='rgb_simple_1_input')\n","# rgb_simple_2_input = tf.keras.layers.Input(shape=(1, ), name='rgb_simple_2_input')\n","# hsv_simple_1_input = tf.keras.layers.Input(shape=(1, ), name='hsv_simple_1_input')\n","# hsv_simple_2_input = tf.keras.layers.Input(shape=(1, ), name='hsv_simple_2_input')\n","# hue_hist_1_input = tf.keras.layers.Input(shape=(1, ), name='hue_hist_1_input')\n","# hue_hist_2_input = tf.keras.layers.Input(shape=(1, ), name='hue_hist_2_input')\n","# hue_hist_3_input = tf.keras.layers.Input(shape=(1, ), name='hue_hist_3_input')\n","# gray_simple_1_input = tf.keras.layers.Input(shape=(1, ), name='gray_simple_1_input')\n","# gray_simple_2_input = tf.keras.layers.Input(shape=(1, ), name='gray_simple_2_input')\n","# gray_simple_3_input = tf.keras.layers.Input(shape=(1, ), name='gray_simple_3_input')\n","# sharpness_input = tf.keras.layers.Input(shape=(1, ), name='sharpness_input')\n","# contrast_input = tf.keras.layers.Input(shape=(1, ), name='contrast_input')\n","# colorful_input = tf.keras.layers.Input(shape=(1, ), name='colorful_input')\n","# sat_1_input = tf.keras.layers.Input(shape=(1, ), name='sat_1_input')\n","# sat_2_input = tf.keras.layers.Input(shape=(1, ), name='sat_2_input')\n","# sat_3_input = tf.keras.layers.Input(shape=(1, ), name='sat_3_input')\n","# sat_4_input = tf.keras.layers.Input(shape=(1, ), name='sat_4_input')\n","# bright_1_input = tf.keras.layers.Input(shape=(1, ), name='bright_1_input')\n","# bright_2_input = tf.keras.layers.Input(shape=(1, ), name='bright_2_input')\n","# bright_3_input = tf.keras.layers.Input(shape=(1, ), name='bright_3_input')\n","# bright_4_input = tf.keras.layers.Input(shape=(1, ), name='bright_4_input')\n","\n","# Embedding + Layers\n","title_embedding = layers.Embedding(max_features +1, embedding_dim, input_length=100)(title_input)\n","desc_embedding = layers.Embedding(max_features +1, embedding_dim, input_length=sequence_length)(desc_input)\n","user_embedding = layers.Embedding(max_features +1, embedding_dim, input_length = sequence_length)(user_input)\n","category_embedding = layers.Embedding(max_features +1, embedding_dim, input_length = sequence_length)(category_input)\n","subcategory_embedding = layers.Embedding(max_features +1, embedding_dim, input_length = sequence_length)(subcategory_input)\n","region_embedding = layers.Embedding(max_features +1, embedding_dim, input_length = sequence_length)(region_input)\n","layer_precio = layers.Dense(128, activation=\"relu\", name='layer_precio')(precio_input)\n","layer_population = layers.Dense(128, activation=\"relu\", name='layer_population')(population_input)\n","layer_wage = layers.Dense(128, activation=\"relu\", name='layer_wage')(wage_input)\n","layer_ratio_wage = layers.Dense(128, activation=\"relu\", name='layer_ratio_wage')(ratio_wage_input)\n","\n","# layer_n_segments = layers.Dense(128, activation=\"relu\", name='layer_n_segments')(n_segments_input)\n","# layer_contrast_segments_size = layers.Dense(128, activation=\"relu\", name='layer_contrast_segments_size')(contrast_segments_size_input)\n","# layer_ratio_largest_component = layers.Dense(128, activation=\"relu\", name='layer_ratio_largest_component')(ratio_largest_component_input)\n","# layer_ratio_second_largest_component = layers.Dense(128, activation=\"relu\", name='layer_ratio_second_largest_component')(ratio_second_largest_component_input)\n","# layer_segment_hue_1 = layers.Dense(128, activation=\"relu\", name='layer_segment_hue_1')(segment_hue_1_input)\n","# layer_segment_hue_2 = layers.Dense(128, activation=\"relu\", name='layer_segment_hue_2')(segment_hue_2_input)\n","# layer_segment_hue_3 = layers.Dense(128, activation=\"relu\", name='layer_segment_hue_3')(segment_hue_3_input)\n","# layer_segment_bright_1 = layers.Dense(128, activation=\"relu\", name='layer_segment_bright_1')(segment_bright_1_input)\n","# layer_segment_bright_2 = layers.Dense(128, activation=\"relu\", name='layer_segment_bright_2')(segment_bright_2_input)\n","# layer_segment_bright_3 = layers.Dense(128, activation=\"relu\", name='layer_segment_bright_3')(segment_bright_3_input)\n","# layer_n_sift = layers.Dense(128, activation=\"relu\", name='layer_n_sift')(n_sift_input)\n","# layer_rgb_simple_1 = layers.Dense(128, activation=\"relu\", name='layer_rgb_simple_1')(rgb_simple_1_input)\n","# layer_rgb_simple_2 = layers.Dense(128, activation=\"relu\", name='layer_rgb_simple_2')(rgb_simple_2_input)\n","# layer_hsv_simple_1 = layers.Dense(128, activation=\"relu\", name='layer_hsv_simple_1')(hsv_simple_1_input)\n","# layer_hsv_simple_2 = layers.Dense(128, activation=\"relu\", name='layer_hsv_simple_2')(hsv_simple_2_input)\n","# layer_hue_hist_1 = layers.Dense(128, activation=\"relu\", name='layer_hue_hist_1')(hue_hist_1_input)\n","# layer_hue_hist_2 = layers.Dense(128, activation=\"relu\", name='layer_hue_hist_2')(hue_hist_2_input)\n","# layer_hue_hist_3 = layers.Dense(128, activation=\"relu\", name='layer_hue_hist_3')(hue_hist_3_input)\n","# layer_gray_simple_1 = layers.Dense(128, activation=\"relu\", name='layer_gray_simple_1')(gray_simple_1_input)\n","# layer_gray_simple_2 = layers.Dense(128, activation=\"relu\", name='layer_gray_simple_2')(gray_simple_2_input)\n","# layer_gray_simple_3 = layers.Dense(128, activation=\"relu\", name='layer_gray_simple_3')(gray_simple_3_input)\n","# layer_sharpness = layers.Dense(128, activation=\"relu\", name='layer_sharpness')(sharpness_input)\n","# layer_contrast = layers.Dense(128, activation=\"relu\", name='layer_contrast')(contrast_input)\n","# layer_colorful = layers.Dense(128, activation=\"relu\", name='layer_colorful')(colorful_input)\n","# layer_sat_1 = layers.Dense(128, activation=\"relu\", name='layer_sat_1')(sat_1_input)\n","# layer_sat_2 = layers.Dense(128, activation=\"relu\", name='layer_sat_2')(sat_2_input)\n","# layer_sat_3 = layers.Dense(128, activation=\"relu\", name='layer_sat_3')(sat_3_input)\n","# layer_sat_4 = layers.Dense(128, activation=\"relu\", name='layer_sat_4')(sat_4_input)\n","# layer_bright_1 = layers.Dense(128, activation=\"relu\", name='layer_bright_1')(bright_1_input)\n","# layer_bright_2 = layers.Dense(128, activation=\"relu\", name='layer_bright_2')(bright_2_input)\n","# layer_bright_3 = layers.Dense(128, activation=\"relu\", name='layer_bright_3')(bright_3_input)\n","# layer_bright_4 = layers.Dense(128, activation=\"relu\", name='layer_bright_4')(bright_4_input)\n","\n","# Model\n","concat = tf.concat([title_embedding, desc_embedding, user_embedding, category_embedding, subcategory_embedding, region_embedding], axis=1)\n","layer_1 = layers.Dense(128, activation=\"relu\", name='layer_1')(concat)\n","\n","layer_2 = tf.keras.layers.Flatten()(layer_1)\n","concat2 = tf.concat([layer_2, layer_precio], axis=1)\n","layer_3 = layers.Dense(128, activation=\"relu\", name='layer_3')(concat2)\n","\n","layer_4 = tf.keras.layers.Flatten()(layer_3)\n","concat3 = tf.concat([layer_4, layer_population], axis=1)\n","layer_5 = layers.Dense(128, activation=\"relu\", name='layer_5')(concat3)\n","\n","layer_6 = tf.keras.layers.Flatten()(layer_5)\n","concat4 = tf.concat([layer_6, layer_wage], axis=1)\n","layer_7 = layers.Dense(128, activation=\"relu\", name='layer_7')(concat4)\n","\n","layer_8 = tf.keras.layers.Flatten()(layer_7)\n","concat5 = tf.concat([layer_8, layer_ratio_wage], axis=1)\n","layer_9 = layers.Dense(128, activation=\"relu\", name='layer_9')(concat5)\n","\n","# layer_10 = tf.keras.layers.Flatten()(layer_9)\n","# concat6 = tf.concat([layer_10, layer_n_segments], axis=1)\n","# layer_11 = layers.Dense(128, activation=\"relu\", name='layer_11')(concat6)\n","\n","# layer_12 = tf.keras.layers.Flatten()(layer_11)\n","# concat7 = tf.concat([layer_12, layer_contrast_segments_size], axis=1)\n","# layer_13 = layers.Dense(128, activation=\"relu\", name='layer_13')(concat7)\n","\n","# layer_14 = tf.keras.layers.Flatten()(layer_13)\n","# concat8 = tf.concat([layer_14, layer_ratio_largest_component], axis=1)\n","# layer_15 = layers.Dense(128, activation=\"relu\", name='layer_15')(concat8)\n","\n","# layer_16 = tf.keras.layers.Flatten()(layer_15)\n","# concat9 = tf.concat([layer_16, layer_ratio_second_largest_component], axis=1)\n","# layer_17 = layers.Dense(128, activation=\"relu\", name='layer_17')(concat9)\n","\n","# layer_18 = tf.keras.layers.Flatten()(layer_17)\n","# concat10 = tf.concat([layer_18, layer_segment_hue_1], axis=1)\n","# layer_19 = layers.Dense(128, activation=\"relu\", name='layer_19')(concat10)\n","\n","# layer_20 = tf.keras.layers.Flatten()(layer_19)\n","# concat11 = tf.concat([layer_20, layer_segment_hue_2], axis=1)\n","# layer_21 = layers.Dense(128, activation=\"relu\", name='layer_21')(concat11)\n","\n","# layer_22 = tf.keras.layers.Flatten()(layer_21)\n","# concat12 = tf.concat([layer_22, layer_segment_hue_3], axis=1)\n","# layer_23 = layers.Dense(128, activation=\"relu\", name='layer_23')(concat12)\n","\n","# layer_24 = tf.keras.layers.Flatten()(layer_23)\n","# concat13 = tf.concat([layer_24, layer_segment_bright_1], axis=1)\n","# layer_25 = layers.Dense(128, activation=\"relu\", name='layer_25')(concat13)\n","\n","# layer_26 = tf.keras.layers.Flatten()(layer_25)\n","# concat14 = tf.concat([layer_26, layer_segment_bright_2], axis=1)\n","# layer_27 = layers.Dense(128, activation=\"relu\", name='layer_27')(concat14)\n","\n","# layer_28 = tf.keras.layers.Flatten()(layer_27)\n","# concat15 = tf.concat([layer_28, layer_segment_bright_3], axis=1)\n","# layer_29 = layers.Dense(128, activation=\"relu\", name='layer_29')(concat15)\n","\n","# layer_30 = tf.keras.layers.Flatten()(layer_29)\n","# concat16 = tf.concat([layer_30, layer_n_sift], axis=1)\n","# layer_31 = layers.Dense(128, activation=\"relu\", name='layer_31')(concat16)\n","\n","# layer_32 = tf.keras.layers.Flatten()(layer_31)\n","# concat17 = tf.concat([layer_32, layer_rgb_simple_1], axis=1)\n","# layer_33 = layers.Dense(128, activation=\"relu\", name='layer_33')(concat17)\n","\n","# layer_34 = tf.keras.layers.Flatten()(layer_33)\n","# concat18 = tf.concat([layer_34, layer_rgb_simple_2], axis=1)\n","# layer_35 = layers.Dense(128, activation=\"relu\", name='layer_35')(concat18)\n","\n","# layer_36 = tf.keras.layers.Flatten()(layer_35)\n","# concat19 = tf.concat([layer_36, layer_hsv_simple_1], axis=1)\n","# layer_37 = layers.Dense(128, activation=\"relu\", name='layer_37')(concat19)\n","\n","# layer_38 = tf.keras.layers.Flatten()(layer_37)\n","# concat20 = tf.concat([layer_38, layer_hsv_simple_2], axis=1)\n","# layer_39 = layers.Dense(128, activation=\"relu\", name='layer_39')(concat20)\n","\n","# layer_40 = tf.keras.layers.Flatten()(layer_39)\n","# concat21 = tf.concat([layer_40, layer_hue_hist_1], axis=1)\n","# layer_41 = layers.Dense(128, activation=\"relu\", name='layer_41')(concat21)\n","\n","# layer_42 = tf.keras.layers.Flatten()(layer_41)\n","# concat22 = tf.concat([layer_42, layer_hue_hist_2], axis=1)\n","# layer_43 = layers.Dense(128, activation=\"relu\", name='layer_43')(concat22)\n","\n","# layer_44 = tf.keras.layers.Flatten()(layer_43)\n","# concat23 = tf.concat([layer_44, layer_hue_hist_3], axis=1)\n","# layer_45 = layers.Dense(128, activation=\"relu\", name='layer_45')(concat23)\n","\n","# layer_46 = tf.keras.layers.Flatten()(layer_45)\n","# concat24 = tf.concat([layer_46, layer_gray_simple_1], axis=1)\n","# layer_47 = layers.Dense(128, activation=\"relu\", name='layer_47')(concat24)\n","\n","# layer_48 = tf.keras.layers.Flatten()(layer_47)\n","# concat25 = tf.concat([layer_48, layer_gray_simple_2], axis=1)\n","# layer_49 = layers.Dense(128, activation=\"relu\", name='layer_49')(concat25)\n","\n","# layer_50 = tf.keras.layers.Flatten()(layer_49)\n","# concat26 = tf.concat([layer_50, layer_gray_simple_3], axis=1)\n","# layer_51 = layers.Dense(128, activation=\"relu\", name='layer_51')(concat26)\n","\n","# layer_52 = tf.keras.layers.Flatten()(layer_51)\n","# concat27 = tf.concat([layer_52, layer_sharpness], axis=1)\n","# layer_53 = layers.Dense(128, activation=\"relu\", name='layer_53')(concat27)\n","\n","# layer_54 = tf.keras.layers.Flatten()(layer_53)\n","# concat28 = tf.concat([layer_54, layer_contrast], axis=1)\n","# layer_55 = layers.Dense(128, activation=\"relu\", name='layer_55')(concat28)\n","\n","# layer_56 = tf.keras.layers.Flatten()(layer_55)\n","# concat29 = tf.concat([layer_56, layer_colorful], axis=1)\n","# layer_57 = layers.Dense(128, activation=\"relu\", name='layer_57')(concat29)\n","\n","# layer_58 = tf.keras.layers.Flatten()(layer_57)\n","# concat30 = tf.concat([layer_58, layer_sat_1], axis=1)\n","# layer_59 = layers.Dense(128, activation=\"relu\", name='layer_59')(concat30)\n","\n","# layer_60 = tf.keras.layers.Flatten()(layer_59)\n","# concat31 = tf.concat([layer_60, layer_sat_2], axis=1)\n","# layer_61 = layers.Dense(128, activation=\"relu\", name='layer_61')(concat31)\n","\n","# layer_62 = tf.keras.layers.Flatten()(layer_61)\n","# concat32 = tf.concat([layer_62, layer_sat_3], axis=1)\n","# layer_63 = layers.Dense(128, activation=\"relu\", name='layer_63')(concat32)\n","\n","# layer_64 = tf.keras.layers.Flatten()(layer_63)\n","# concat33 = tf.concat([layer_64, layer_sat_4], axis=1)\n","# layer_65 = layers.Dense(128, activation=\"relu\", name='layer_65')(concat33)\n","\n","# layer_66 = tf.keras.layers.Flatten()(layer_65)\n","# concat34 = tf.concat([layer_66, layer_bright_1], axis=1)\n","# layer_67 = layers.Dense(128, activation=\"relu\", name='layer_67')(concat34)\n","\n","# layer_68 = tf.keras.layers.Flatten()(layer_67)\n","# concat35 = tf.concat([layer_68, layer_bright_2], axis=1)\n","# layer_69 = layers.Dense(128, activation=\"relu\", name='layer_69')(concat35)\n","\n","# layer_70 = tf.keras.layers.Flatten()(layer_69)\n","# concat36 = tf.concat([layer_70, layer_bright_3], axis=1)\n","# layer_71 = layers.Dense(128, activation=\"relu\", name='layer_71')(concat36)\n","\n","# layer_72 = tf.keras.layers.Flatten()(layer_71)\n","# concat37 = tf.concat([layer_72, layer_bright_4], axis=1)\n","# layer_73 = layers.Dense(128, activation=\"relu\", name='layer_73')(concat37)\n","\n","outputs = layers.Dense(1, activation='sigmoid', name='output')(layer_9)\n","\n","model = tf.keras.Model(inputs=[title_input, desc_input, user_input, category_input, \n","                               subcategory_input, region_input, precio_input, \n","                               population_input, wage_input, ratio_wage_input], \n","                       outputs=outputs, name='snipesell_model')\n","\n","# Predict rating\n","model.summary()\n","model.compile(loss='BinaryCrossentropy', optimizer='adam', metrics=['accuracy'])"]},{"cell_type":"markdown","metadata":{"id":"464wQAGFf5NC"},"source":["Variables en el modelo actual\n","\n","* x_train1 (`title`)\n","* x_train2 (`description`)\n","* x_trainu (`user_type`)\n","* x_trainpc (`category`)\n","* x_trainpcs (`subcategory`)\n","* x_trainr (`region`)\n","* np.asarray(x_trainp).reshape(459602,1) (`log(price)`)\n","* np.asarray(x_trainpo).reshape(459602,1) (`log(population)`)\n","* np.asarray(x_trainw).reshape(459602,1) (`log(wage)`)\n","* X_trainwfdr (`wage_fd/wage`)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3084078,"status":"ok","timestamp":1645290848961,"user":{"displayName":"Ignacio Esplugues","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgCep0Hg7lhNSzfiPq203jW5skF0VO_1lqfA8OkLA=s64","userId":"01341933973910047413"},"user_tz":-60},"id":"8gfVgjKUAIjg","outputId":"534b6f77-a73c-4201-f545-8cd88c49754a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/2\n","14363/14363 [==============================] - 1498s 104ms/step - loss: 0.5656 - accuracy: 0.7147\n","Epoch 2/2\n","14363/14363 [==============================] - 1560s 109ms/step - loss: 0.5318 - accuracy: 0.7371\n"]}],"source":["epochs = 2\n","# Fit the model using the train and test dataset\n","history = model.fit([x_train1, x_train2, x_trainu, x_trainpc, x_trainpcs, x_trainr, \n","                     np.asarray(x_trainp).reshape(459602 ,1), # 425599 con características de imágenes\n","                     np.asarray(x_trainpo).reshape(459602 ,1), \n","                     np.asarray(x_trainw).reshape(459602 ,1), \n","                     np.asarray(x_trainw).reshape(459602 ,1)],\n","                    train_labels2, epochs = epochs)\n","\n","#Titulo + Descripcion + price + user_type\n","# 14363/14363 [==============================] - 590s 41ms/step - loss: 0.5725 - accuracy: 0.7097\n","\n","#Titulo + Descripcion + log(price) + user_type + log(population) + region + parent_category\n","# 14363/14363 [==============================] - 818s 57ms/step - loss: 0.5693 - accuracy: 0.7105\n","\n","#Titulo + Descripcion + log(price) + user_type + log(population) + region + category\n","# 14363/14363 [==============================] - 1021s 71ms/step - loss: 0.5686 - accuracy: 0.7113\n","\n","#Titulo + Descripcion + log(price) + user_type + log(population) + region + category + log(wage) + (wage_fd/wage)\n","# 14363/14363 [==============================] - 880s 61ms/step - loss: 0.5685 - accuracy: 0.7115\n","\n","#Titulo + Descripcion + log(price) + user_type + log(population) + region + category + subcategory + log(wage) + (wage_fd/wage)\n","# 14363/14363 [==============================] - 1110s 77ms/step - loss: 0.5657 - accuracy: 0.7138\n","\n","#Titulo + Descripcion + log(price) + user_type + log(population) + region + category + subcategory + log(wage) + (wage_fd/wage) + Características de imágenes\n","# Empezando en ~0.65 tiende a 0\n","\n","#Titulo + Descripcion + log(price) + user_type + log(population) + region + category + subcategory + log(wage) + (wage_fd/wage) (epochs = 2)\n","# Epoch 1/2\n","# 14363/14363 [==============================] - 1124s 78ms/step - loss: 0.5656 - accuracy: 0.7146\n","# Epoch 2/2\n","# 14363/14363 [==============================] - 1078s 75ms/step - loss: 0.5463 - accuracy: 0.7272\n","\n","#Titulo + Descripcion + log(price) + user_type + log(population) + region + category + subcategory + log(wage) + (wage_fd/wage) (epochs = 1|max_features = 50000|embedding_dim = 16|sequence_length = 100)\n","# 14363/14363 [==============================] - 1626s 113ms/step - loss: 0.5639 - accuracy: 0.7149\n","\n","#Titulo + Descripcion + log(price) + user_type + log(population) + region + category + subcategory + log(wage) + (wage_fd/wage) (epochs = 3|max_features = 50000|embedding_dim = 16|sequence_length = 100)\n","# Epoch 1/3\n","# 14363/14363 [==============================] - 1510s 105ms/step - loss: 0.5648 - accuracy: 0.7149\n","# Epoch 2/3\n","# 14363/14363 [==============================] - 1484s 103ms/step - loss: 0.5332 - accuracy: 0.7354\n","# Epoch 3/3\n","# 14363/14363 [==============================] - 1475s 103ms/step - loss: 0.4978 - accuracy: 0.7591"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sDkBUojZSLh8","executionInfo":{"status":"ok","timestamp":1645291363517,"user_tz":-60,"elapsed":63660,"user":{"displayName":"Ignacio Esplugues","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgCep0Hg7lhNSzfiPq203jW5skF0VO_1lqfA8OkLA=s64","userId":"01341933973910047413"}},"outputId":"214db18c-5070-4992-d55f-eb5e06164187"},"outputs":[{"output_type":"stream","name":"stdout","text":["Precision       | 0.5949\n","Accuracy        | 0.7156\n","Sensitivity     | 0.4652\n","Specificity     | 0.8412\n","False Positive  | 0.1588\n","False Negative  | 0.5348\n","f1-score        | 0.5221\n","\n","       0      1\n","0  85824  16207\n","1  27365  23805\n"]}],"source":["# Test\n","\n","x_validu = pd.DataFrame(X_validu)\n","oe_results = oe_style.fit_transform(x_validu[[0]])\n","x_validu = oe_results.toarray()\n","\n","x_validpc = pd.DataFrame(X_validpc)\n","oe_results = oe_style.fit_transform(x_validpc[[0]])\n","x_validpc = oe_results.toarray()\n","\n","x_validpcs = pd.DataFrame(X_validpcs)\n","oe_results = oe_style.fit_transform(x_validpcs[[0]])\n","x_validpcs = oe_results.toarray()\n","\n","x_validr = pd.DataFrame(X_validr)\n","oe_results = oe_style.fit_transform(x_validr[[0]])\n","x_validr = oe_results.toarray()\n","\n","y_pred = model.predict([x_valid1, x_valid2, x_validu, x_validpc, x_validpcs, x_validr, \n","                        np.asarray(x_validp).reshape(153201,1),\n","                        np.asarray(x_validpo).reshape(153201,1), \n","                        np.asarray(x_validw).reshape(153201,1), \n","                        np.asarray(X_validwfdr).reshape(153201,1)])\n","\n","y_results = pd.DataFrame(y_pred)\n","y_results.columns = ['y_pred']\n","y_results['y_pred_01'] = np.where(y_results['y_pred'] < 0.5, 0, 1)\n","y_results['y_valid_01'] = pd.DataFrame(valid_labels2)\n","\n","from tabulate import tabulate\n","\n","def err_metric(CM): \n","  '''Error metrics: Confusion matrix | FPR | FNR | f1 score'''\n","  TN = CM.iloc[0,0]\n","  FN = CM.iloc[1,0]\n","  TP = CM.iloc[1,1]\n","  FP = CM.iloc[0,1]\n","\n","  precision = (TP)/(TP + FP)\n","  accuracy_model = (TP + TN)/(TP + TN + FP + FN)\n","  recall_score = (TP)/(TP + FN)\n","  specificity_value = (TN)/(TN + FP)\n","  False_positive_rate = (FP)/(FP + TN)\n","  False_negative_rate = (FN)/(FN + TP)\n","  f1_score = 2*((precision * recall_score)/(precision + recall_score))\n","\n","  print(\"Precision       | \"+str(round(precision, 4)))\n","  print(\"Accuracy        | \"+str(round(accuracy_model, 4)))\n","  print(\"Sensitivity     | \"+str(round(recall_score, 4)))\n","  print(\"Specificity     | \"+str(round(specificity_value, 4)))\n","  print(\"False Positive  | \"+str(round(False_positive_rate, 4)))\n","  print(\"False Negative  | \"+str(round(False_negative_rate, 4)))\n","  print(\"f1-score        | \"+str(round(f1_score, 4)))\n","  print('')\n","  print(CM)\n","\n","from sklearn.metrics import confusion_matrix\n","y_true = y_results['y_valid_01']\n","y_pred = y_results['y_pred_01']\n","cm = pd.DataFrame(confusion_matrix(y_true, y_pred))\n","err_metric(cm)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AaCfxWL-2y5D"},"outputs":[],"source":["# Descargar modelo.sav\n","\n","import pickle\n","\n","filename = 'snipesell_model_3.sav'\n","pickle.dump(model, open(filename, 'wb'))"]}],"metadata":{"colab":{"collapsed_sections":[],"name":"modelo text mining (Nacho)","provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}