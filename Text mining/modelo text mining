{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"modelo text mining","provenance":[],"collapsed_sections":["X6qYnKwSmdtp","v4QbMKJtnBOJ","nveLUvdpbsZ5","PRtxs-kXaS5h"]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"id":"5EBd231HCHxa","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1644839974191,"user_tz":-60,"elapsed":17326,"user":{"displayName":"Ignacio Esplugues","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgCep0Hg7lhNSzfiPq203jW5skF0VO_1lqfA8OkLA=s64","userId":"01341933973910047413"}},"outputId":"ffd62b86-5466-4edc-eeb0-c83f3382cc6e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["import matplotlib as mpl\n","import matplotlib.pyplot as plt\n","import os\n","import re\n","import shutil\n","import string\n","import tensorflow as tf\n","from tensorflow.keras import regularizers\n","\n","from tensorflow.keras import layers\n","from tensorflow.keras import losses\n","\n","from collections import Counter\n","\n","\n","import pandas as pd\n","import numpy as np\n","\n","import sklearn\n","\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report\n","\n","from tensorflow.keras import preprocessing\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","\n","\n","import seaborn as sns\n","\n","import pydot"],"metadata":{"id":"qr5rvMnK0AZL","executionInfo":{"status":"ok","timestamp":1644839984736,"user_tz":-60,"elapsed":10550,"user":{"displayName":"Ignacio Esplugues","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgCep0Hg7lhNSzfiPq203jW5skF0VO_1lqfA8OkLA=s64","userId":"01341933973910047413"}}},"execution_count":2,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import tensorflow as tf\n","import matplotlib.pyplot as plt"],"metadata":{"id":"ZBPMiOEZCa92","executionInfo":{"status":"ok","timestamp":1644839984739,"user_tz":-60,"elapsed":16,"user":{"displayName":"Ignacio Esplugues","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgCep0Hg7lhNSzfiPq203jW5skF0VO_1lqfA8OkLA=s64","userId":"01341933973910047413"}}},"execution_count":3,"outputs":[]},{"cell_type":"code","source":["r = \"/content/drive/MyDrive/TFM Big Data & BA/Propuestas/Proyecto Final/2 - Text Mining/df_textm.csv\"\n","df = pd.read_csv(r)"],"metadata":{"id":"es4yJ5OLClF2","executionInfo":{"status":"ok","timestamp":1644840013869,"user_tz":-60,"elapsed":29143,"user":{"displayName":"Ignacio Esplugues","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgCep0Hg7lhNSzfiPq203jW5skF0VO_1lqfA8OkLA=s64","userId":"01341933973910047413"}}},"execution_count":4,"outputs":[]},{"cell_type":"code","source":["df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"scB_QaDwEGJV","executionInfo":{"status":"ok","timestamp":1644840014274,"user_tz":-60,"elapsed":418,"user":{"displayName":"Ignacio Esplugues","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgCep0Hg7lhNSzfiPq203jW5skF0VO_1lqfA8OkLA=s64","userId":"01341933973910047413"}},"outputId":"143a6ee6-693e-43dd-ee7e-92ce8e971951"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 622762 entries, 0 to 622761\n","Data columns (total 21 columns):\n"," #   Column            Non-Null Count   Dtype  \n","---  ------            --------------   -----  \n"," 0   Unnamed: 0        622762 non-null  int64  \n"," 1   llave             622762 non-null  int64  \n"," 2   id                622762 non-null  object \n"," 3   price             622762 non-null  float64\n"," 4   user_type         622762 non-null  object \n"," 5   deal_probability  622762 non-null  float64\n"," 6   category          622762 non-null  object \n"," 7   subcategory       622762 non-null  object \n"," 8   city              622762 non-null  object \n"," 9   region            622762 non-null  object \n"," 10  image             622762 non-null  object \n"," 11  description       622762 non-null  object \n"," 12  title             622762 non-null  object \n"," 13  population        622762 non-null  int64  \n"," 14  wage              622762 non-null  float64\n"," 15  federal_district  622762 non-null  object \n"," 16  wage_fd           622762 non-null  int64  \n"," 17  sold              622762 non-null  int64  \n"," 18  parent_category   622762 non-null  object \n"," 19  Titulo            615103 non-null  object \n"," 20  Descripcion       620374 non-null  object \n","dtypes: float64(3), int64(5), object(13)\n","memory usage: 99.8+ MB\n"]}]},{"cell_type":"code","source":["df= df[df[\"Titulo\"].isna()== False]\n","df= df[df[\"Descripcion\"].isna()== False]"],"metadata":{"id":"R-b0kn4uR-KL","executionInfo":{"status":"ok","timestamp":1644840014910,"user_tz":-60,"elapsed":648,"user":{"displayName":"Ignacio Esplugues","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgCep0Hg7lhNSzfiPq203jW5skF0VO_1lqfA8OkLA=s64","userId":"01341933973910047413"}}},"execution_count":6,"outputs":[]},{"cell_type":"markdown","source":["# Modelo Titulo"],"metadata":{"id":"X6qYnKwSmdtp"}},{"cell_type":"code","source":["X_train, X_valid, y_train, y_valid = train_test_split(df['Titulo'].tolist(),\\\n","                                                      df['sold'].tolist(),\\\n","                                                      test_size=0.25,\\\n","                                                      stratify = df['sold'].tolist(),\\\n","                                                      random_state=0)"],"metadata":{"id":"o-2FUEK8myCy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["num_words = 5000\n","\n","tokenizer = Tokenizer(num_words=num_words)\n","tokenizer.fit_on_texts(X_train)\n","\n","\n","\n","print(str(tokenizer.texts_to_sequences(['xyz how are you'])))"],"metadata":{"id":"GXHQsJzBm1x_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x_train = np.array( tokenizer.texts_to_sequences(X_train) )\n","x_valid = np.array( tokenizer.texts_to_sequences(X_valid) )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XcG3aqmsm5H_","executionInfo":{"status":"ok","timestamp":1644139814123,"user_tz":-60,"elapsed":8777,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"}},"outputId":"b7c9bd6c-0f34-4ba2-c5ae-0248e7f044f1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  \"\"\"Entry point for launching an IPython kernel.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  \n"]}]},{"cell_type":"code","source":["x_train = np.array( tokenizer.texts_to_sequences(X_train) )\n","x_valid = np.array( tokenizer.texts_to_sequences(X_valid) )\n","\n","\n","x_train = pad_sequences(x_train, padding='post', maxlen=100)\n","x_valid = pad_sequences(x_valid, padding='post', maxlen=100)\n","\n","\n","\n","train_labels = np.asarray(y_train )\n","valid_labels = np.asarray( y_valid)\n","\n","\n","\n","print('Train data len:'+str(len(x_train)))\n","print('Class distribution'+str(Counter(train_labels)))\n","\n","print('Validation data len:'+str(len(x_valid)))\n","print('Class distribution'+str(Counter(valid_labels)))\n","\n","\n","\n","train_ds = tf.data.Dataset.from_tensor_slices((x_train,train_labels))\n","valid_ds = tf.data.Dataset.from_tensor_slices((x_valid,valid_labels))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PcVdHB1Xm9EX","executionInfo":{"status":"ok","timestamp":1644139828349,"user_tz":-60,"elapsed":14234,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"}},"outputId":"dfbb5dfe-636f-4d9e-81b4-cba49ac8c27e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  \"\"\"Entry point for launching an IPython kernel.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  \n"]},{"output_type":"stream","name":"stdout","text":["Train data len:459602\n","Class distributionCounter({0: 306091, 1: 153511})\n","Validation data len:153201\n","Class distributionCounter({0: 102031, 1: 51170})\n"]}]},{"cell_type":"code","source":["max_features =5000\n","embedding_dim =16\n","sequence_length = 100\n","\n","model = tf.keras.Sequential()\n","\n","\n","model.add(tf.keras.layers.Embedding(max_features +1, embedding_dim, input_length=sequence_length,\\\n","                                    embeddings_regularizer = regularizers.l2(0.005))) \n","model.add(tf.keras.layers.Dropout(0.4))\n","\n","model.add(tf.keras.layers.LSTM(embedding_dim,dropout=0.2, recurrent_dropout=0.2,return_sequences=True,\\\n","                                                             kernel_regularizer=regularizers.l2(0.005),\\\n","                                                             bias_regularizer=regularizers.l2(0.005)))\n","model.add(tf.keras.layers.Flatten())\n","\n","model.add(tf.keras.layers.Dense(512, activation='relu',\\\n","                                kernel_regularizer=regularizers.l2(0.001),\\\n","                                bias_regularizer=regularizers.l2(0.001),))\n","model.add(tf.keras.layers.Dropout(0.4))\n","\n","model.add(tf.keras.layers.Dense(8, activation='relu',\\\n","                                kernel_regularizer=regularizers.l2(0.001),\\\n","                                bias_regularizer=regularizers.l2(0.001),))\n","model.add(tf.keras.layers.Dropout(0.4))\n","\n","\n","\n","model.add(tf.keras.layers.Dense(1,activation='sigmoid'))\n","                               \n","\n","\n","\n","model.summary()\n","model.compile(loss=tf.keras.losses.BinaryCrossentropy(),optimizer=tf.keras.optimizers.Adam(1e-3),metrics=[tf.keras.metrics.BinaryAccuracy()])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OyqarWH_1m5L","executionInfo":{"status":"ok","timestamp":1644057078211,"user_tz":-60,"elapsed":658,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"}},"outputId":"dae04d3d-7096-4fac-c67c-bffcd1f1d68c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_12\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," embedding_10 (Embedding)    (None, 100, 16)           80016     \n","                                                                 \n"," dropout_22 (Dropout)        (None, 100, 16)           0         \n","                                                                 \n"," lstm_6 (LSTM)               (None, 100, 16)           2112      \n","                                                                 \n"," flatten_9 (Flatten)         (None, 1600)              0         \n","                                                                 \n"," dense_24 (Dense)            (None, 512)               819712    \n","                                                                 \n"," dropout_23 (Dropout)        (None, 512)               0         \n","                                                                 \n"," dense_25 (Dense)            (None, 8)                 4104      \n","                                                                 \n"," dropout_24 (Dropout)        (None, 8)                 0         \n","                                                                 \n"," dense_26 (Dense)            (None, 1)                 9         \n","                                                                 \n","=================================================================\n","Total params: 905,953\n","Trainable params: 905,953\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["train_labels"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JjBuIPYbvVn_","executionInfo":{"status":"ok","timestamp":1644011811090,"user_tz":-60,"elapsed":250,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"}},"outputId":"331b0e7b-1a94-4a38-cd10-d585443518f1"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 24. ,   4.8,   4.8, ..., 108. ,  24. ,  27.6])"]},"metadata":{},"execution_count":98}]},{"cell_type":"code","source":["epochs = 1\n","# Fit the model using the train and test datasets.\n","#history = model.fit(x_train, train_labels,validation_data= (x_test,test_labels),epochs=epochs )\n","# Fit the model using the train and test datasets.\n","#history = model.fit(x_train, train_labels,validation_data= (x_test,test_labels),epochs=epochs )\n","history = model.fit(x_train, train_labels,\n","                    epochs= epochs ,\n","                    validation_data=valid_ds.batch(1024),\n","                    verbose=1)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"NYiBXtWJmp7o","executionInfo":{"status":"error","timestamp":1644057133658,"user_tz":-60,"elapsed":25796,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"}},"outputId":"71719f38-4f4d-4a8d-853d-1f88a71bebcd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["  126/14363 [..............................] - ETA: 32:31 - loss: -345229.5312 - binary_accuracy: 0.0000e+00"]},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-24-37fdcdebd330>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      7\u001b[0m                     \u001b[0mepochs\u001b[0m\u001b[0;34m=\u001b[0m \u001b[0mepochs\u001b[0m \u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m                     \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvalid_ds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1024\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m                     verbose=1)\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/utils/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     62\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     63\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 64\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     65\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m  \u001b[0;31m# pylint: disable=broad-except\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_batch_size, validation_freq, max_queue_size, workers, use_multiprocessing)\u001b[0m\n\u001b[1;32m   1214\u001b[0m                 _r=1):\n\u001b[1;32m   1215\u001b[0m               \u001b[0mcallbacks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mon_train_batch_begin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1216\u001b[0;31m               \u001b[0mtmp_logs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1217\u001b[0m               \u001b[0;32mif\u001b[0m \u001b[0mdata_handler\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshould_sync\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1218\u001b[0m                 \u001b[0mcontext\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0masync_wait\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/util/traceback_utils.py\u001b[0m in \u001b[0;36merror_handler\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    148\u001b[0m     \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 150\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m       \u001b[0mfiltered_tb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process_traceback_frames\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__traceback__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    908\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    909\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mOptionalXlaContext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jit_compile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 910\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    911\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    912\u001b[0m       \u001b[0mnew_tracing_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexperimental_get_tracing_count\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/def_function.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, *args, **kwds)\u001b[0m\n\u001b[1;32m    940\u001b[0m       \u001b[0;31m# In this case we have created variables on the first call, so we run the\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    941\u001b[0m       \u001b[0;31m# defunned version which is guaranteed to never create variables.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 942\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateless_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# pylint: disable=not-callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    943\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_stateful_fn\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    944\u001b[0m       \u001b[0;31m# Release the lock early so that multiple threads can perform the call\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   3129\u001b[0m        filtered_flat_args) = self._maybe_define_function(args, kwargs)\n\u001b[1;32m   3130\u001b[0m     return graph_function._call_flat(\n\u001b[0;32m-> 3131\u001b[0;31m         filtered_flat_args, captured_inputs=graph_function.captured_inputs)  # pylint: disable=protected-access\n\u001b[0m\u001b[1;32m   3132\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3133\u001b[0m   \u001b[0;34m@\u001b[0m\u001b[0mproperty\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36m_call_flat\u001b[0;34m(self, args, captured_inputs, cancellation_manager)\u001b[0m\n\u001b[1;32m   1958\u001b[0m       \u001b[0;31m# No tape is watching; skip to running the function.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1959\u001b[0m       return self._build_call_outputs(self._inference_function.call(\n\u001b[0;32m-> 1960\u001b[0;31m           ctx, args, cancellation_manager=cancellation_manager))\n\u001b[0m\u001b[1;32m   1961\u001b[0m     forward_backward = self._select_forward_and_backward_functions(\n\u001b[1;32m   1962\u001b[0m         \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/function.py\u001b[0m in \u001b[0;36mcall\u001b[0;34m(self, ctx, args, cancellation_manager)\u001b[0m\n\u001b[1;32m    601\u001b[0m               \u001b[0minputs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    602\u001b[0m               \u001b[0mattrs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mattrs\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 603\u001b[0;31m               ctx=ctx)\n\u001b[0m\u001b[1;32m    604\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    605\u001b[0m           outputs = execute.execute_with_cancellation(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/tensorflow/python/eager/execute.py\u001b[0m in \u001b[0;36mquick_execute\u001b[0;34m(op_name, num_outputs, inputs, attrs, ctx, name)\u001b[0m\n\u001b[1;32m     57\u001b[0m     \u001b[0mctx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mensure_initialized\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     58\u001b[0m     tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,\n\u001b[0;32m---> 59\u001b[0;31m                                         inputs, attrs, num_outputs)\n\u001b[0m\u001b[1;32m     60\u001b[0m   \u001b[0;32mexcept\u001b[0m \u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_NotOkStatusException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     61\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"markdown","source":["# Modelo Titulo y Descripción"],"metadata":{"id":"v4QbMKJtnBOJ"}},{"cell_type":"code","source":["X_train1, X_valid1, y_train1, y_valid1 = train_test_split(df['Titulo'].tolist(),\\\n","                                                      df['sold'].tolist(),\\\n","                                                      test_size=0.25,\\\n","                                                      stratify = df['sold'].tolist(),\\\n","                                                      random_state=0)\n","\n","X_train2, X_valid2, y_train2, y_valid2 = train_test_split(df['Descripcion'].tolist(),\\\n","                                                      df['sold'].tolist(),\\\n","                                                      test_size=0.25,\\\n","                                                      stratify = df['sold'].tolist(),\\\n","                                                      random_state=0)\n"],"metadata":{"id":"BOVTVv_-Ow13"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["num_words = 5000\n","\n","tokenizer1 = Tokenizer(num_words=num_words)\n","tokenizer1.fit_on_texts(X_train1)\n","tokenizer2 = Tokenizer(num_words=num_words)\n","tokenizer2.fit_on_texts(X_train2)"],"metadata":{"id":"LQYdgCcJnrd_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x_train1 = np.array( tokenizer1.texts_to_sequences(X_train1) )\n","x_valid1 = np.array( tokenizer1.texts_to_sequences(X_valid1) )\n","\n","x_train2 = np.array( tokenizer2.texts_to_sequences(X_train2) )\n","x_valid2 = np.array( tokenizer2.texts_to_sequences(X_valid2) )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K6npV-ODnSQ3","executionInfo":{"status":"ok","timestamp":1644392765611,"user_tz":-60,"elapsed":26276,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"}},"outputId":"74f1b076-e6d2-4e21-ca1a-f2977b3fc381"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  \"\"\"Entry point for launching an IPython kernel.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  \n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  after removing the cwd from sys.path.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  \"\"\"\n"]}]},{"cell_type":"code","source":["x_train1 = np.array( tokenizer1.texts_to_sequences(X_train1) )\n","x_valid1 = np.array( tokenizer1.texts_to_sequences(X_valid1) )\n","\n","\n","x_train1 = pad_sequences(x_train1, padding='post', maxlen=100)\n","x_valid1 = pad_sequences(x_valid1, padding='post', maxlen=100)\n","\n","\n","\n","train_labels1 = np.asarray(y_train1 )\n","valid_labels1 = np.asarray( y_valid1)\n","\n","\n","train_ds1 = tf.data.Dataset.from_tensor_slices((x_train1,train_labels1))\n","valid_ds1 = tf.data.Dataset.from_tensor_slices((x_valid1,valid_labels1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b4NfogB1nYm_","executionInfo":{"status":"ok","timestamp":1644392780354,"user_tz":-60,"elapsed":14773,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"}},"outputId":"2c4adb90-929f-4abb-804c-1b736d85ae24"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  \"\"\"Entry point for launching an IPython kernel.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  \n"]}]},{"cell_type":"code","source":["x_train2 = np.array( tokenizer2.texts_to_sequences(X_train2) )\n","x_valid2 = np.array( tokenizer2.texts_to_sequences(X_valid2) )\n","\n","\n","x_train2 = pad_sequences(x_train2, padding='post', maxlen=100)\n","x_valid2 = pad_sequences(x_valid2, padding='post', maxlen=100)\n","\n","\n","\n","train_labels2 = np.asarray(y_train2 )\n","valid_labels2 = np.asarray( y_valid2)\n","\n","\n","train_ds2 = tf.data.Dataset.from_tensor_slices((x_train2,train_labels2))\n","valid_ds2 = tf.data.Dataset.from_tensor_slices((x_valid2,valid_labels2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f5ZAALaUnhaO","executionInfo":{"status":"ok","timestamp":1644392803361,"user_tz":-60,"elapsed":23032,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"}},"outputId":"2c5cd281-387f-48cb-d418-d6243efb7f59"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  \"\"\"Entry point for launching an IPython kernel.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  \n"]}]},{"cell_type":"code","source":["max_features =5000\n","embedding_dim =16\n","sequence_length = 100\n","user_input = tf.keras.layers.Input(shape=(100, ), name='user_input')\n","\n","user_embedding = layers.Embedding(max_features +1, embedding_dim, input_length=sequence_length)(user_input)\n","\n","\n","## movie embeddings\n","movie_input = tf.keras.layers.Input(shape=(100, ), name='movie_input')\n","\n","movie_embedding = layers.Embedding(max_features +1, embedding_dim, input_length=sequence_length)(movie_input)\n","\n","\n","concat = tf.concat([user_embedding, movie_embedding], axis=1)\n","layer_1 = layers.Dense(128, activation=\"relu\", name='layer_1')(concat)\n","\n","layer_2 =tf.keras.layers.BatchNormalization()(layer_1)\n","\n","layer_3 = tf.keras.layers.Flatten()(layer_2)\n","\n","\n","\n","## Predict rating\n","outputs = layers.Dense(1, activation='sigmoid', name='output')(layer_3)\n","\n","\n","model = tf.keras.Model(inputs=[user_input,movie_input], outputs=outputs, name='movie')\n","\n","model.summary()\n","model.compile(loss='BinaryCrossentropy', optimizer='adam', metrics=['accuracy'])\n"],"metadata":{"id":"24Hmpf0EOwy3","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1644392805631,"user_tz":-60,"elapsed":203,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"}},"outputId":"701a5985-d749-4956-9845-8db7a21e207f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"movie\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," user_input (InputLayer)        [(None, 100)]        0           []                               \n","                                                                                                  \n"," movie_input (InputLayer)       [(None, 100)]        0           []                               \n","                                                                                                  \n"," embedding (Embedding)          (None, 100, 16)      80016       ['user_input[0][0]']             \n","                                                                                                  \n"," embedding_1 (Embedding)        (None, 100, 16)      80016       ['movie_input[0][0]']            \n","                                                                                                  \n"," tf.concat (TFOpLambda)         (None, 200, 16)      0           ['embedding[0][0]',              \n","                                                                  'embedding_1[0][0]']            \n","                                                                                                  \n"," layer_1 (Dense)                (None, 200, 128)     2176        ['tf.concat[0][0]']              \n","                                                                                                  \n"," batch_normalization (BatchNorm  (None, 200, 128)    512         ['layer_1[0][0]']                \n"," alization)                                                                                       \n","                                                                                                  \n"," flatten (Flatten)              (None, 25600)        0           ['batch_normalization[0][0]']    \n","                                                                                                  \n"," output (Dense)                 (None, 1)            25601       ['flatten[0][0]']                \n","                                                                                                  \n","==================================================================================================\n","Total params: 188,321\n","Trainable params: 188,065\n","Non-trainable params: 256\n","__________________________________________________________________________________________________\n"]}]},{"cell_type":"code","source":["epochs = 1\n","# Fit the model using the train and test datasets.\n","#history = model.fit(x_train, train_labels,validation_data= (x_test,test_labels),epochs=epochs )\n","# Fit the model using the train and test datasets.\n","#history = model.fit(x_train, train_labels,validation_data= (x_test,test_labels),epochs=epochs )\n","history = model.fit([x_train1,x_train2], train_labels2, \n","                    epochs= epochs )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hHljPID9qKrH","executionInfo":{"status":"ok","timestamp":1644393135214,"user_tz":-60,"elapsed":327404,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"}},"outputId":"2ef56b36-637c-49a1-9542-f693ebd22ad0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["14363/14363 [==============================] - 327s 23ms/step - loss: 0.5795 - accuracy: 0.7028\n"]}]},{"cell_type":"code","source":["predictions = model.predict([x_train1,x_train2])"],"metadata":{"id":"F3fL-InTj1_a"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["for i in range(0,len(predictions)):\n","  if predictions[i] < 0.499:\n","    predictions[i] = 0\n","  else:\n","    predictions[i] = 1"],"metadata":{"id":"WKFrYMp_lJP5"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","conf_matrix = tf.math.confusion_matrix(labels=train_labels2,\n","                                       predictions=predictions)"],"metadata":{"id":"YTlIzmUxntMR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["conf_matrix"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gyTtU5bzktDa","executionInfo":{"status":"ok","timestamp":1644144002252,"user_tz":-60,"elapsed":12,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"}},"outputId":"c0981336-5547-4467-b23e-a8f1fe1dfd16"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 2), dtype=int32, numpy=\n","array([[276511,  29580],\n","       [107352,  46159]], dtype=int32)>"]},"metadata":{},"execution_count":123}]},{"cell_type":"markdown","source":["# Precio"],"metadata":{"id":"nveLUvdpbsZ5"}},{"cell_type":"code","source":["X_trainp, X_validp, y_trainp, y_validp = train_test_split(df['price'].tolist(),\\\n","                                                      df['sold'].tolist(),\\\n","                                                      test_size=0.25,\\\n","                                                      stratify = df['sold'].tolist(),\\\n","                                                      random_state=0)"],"metadata":{"id":"oAqOo7_LrYG1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["precio_input = tf.keras.layers.Input(shape=(1, ), name='precio_input')\n","\n","layer_1 = layers.Dense(128, activation=\"relu\", name='layer_1')(precio_input)\n","outputs = layers.Dense(1, activation='sigmoid', name='output')(layer_1)\n","\n","\n","model = tf.keras.Model(inputs=precio_input, outputs=outputs, name='movie')\n","\n","model.summary()\n","model.compile(loss='BinaryCrossentropy',\n","              optimizer='adam',\n","              metrics=['accuracy'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ZNxzg9oyqrhN","executionInfo":{"status":"ok","timestamp":1644141001126,"user_tz":-60,"elapsed":6,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"}},"outputId":"e318419a-41fa-49fd-bdba-fbfe1a0bcf39"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"movie\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," precio_input (InputLayer)   [(None, 1)]               0         \n","                                                                 \n"," layer_1 (Dense)             (None, 128)               256       \n","                                                                 \n"," output (Dense)              (None, 1)                 129       \n","                                                                 \n","=================================================================\n","Total params: 385\n","Trainable params: 385\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["x_trainp = np.asarray(X_trainp)\n","x_validp = np.asarray(X_validp)\n","train_labelsp = np.asarray(y_trainp )\n","valid_labelsp = np.asarray( y_validp)\n"],"metadata":{"id":"2FRTjK7srwjB"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["len(valid_labelsp)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0qMQuhfjsz9j","executionInfo":{"status":"ok","timestamp":1644061827368,"user_tz":-60,"elapsed":9,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"}},"outputId":"14a1d47e-3aa7-42aa-9307-a54d92371943"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["153201"]},"metadata":{},"execution_count":91}]},{"cell_type":"code","source":["epochs = 5\n","# Fit the model using the train and test datasets.\n","#history = model.fit(x_train, train_labels,validation_data= (x_test,test_labels),epochs=epochs )\n","# Fit the model using the train and test datasets.\n","#history = model.fit(x_train, train_labels,validation_data= (x_test,test_labels),epochs=epochs )\n","history = model.fit(x_trainp, train_labelsp, validation_data= (x_validp,valid_labelsp),epochs=epochs )\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RNfjQanTrjvk","executionInfo":{"status":"ok","timestamp":1644066492730,"user_tz":-60,"elapsed":148824,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"}},"outputId":"166cee32-b921-420b-e276-f39853be63ba"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","14363/14363 [==============================] - 32s 2ms/step - loss: 0.6368 - accuracy: 0.6611 - val_loss: 0.6298 - val_accuracy: 0.6660\n","Epoch 2/5\n","14363/14363 [==============================] - 29s 2ms/step - loss: 0.6320 - accuracy: 0.6641 - val_loss: 0.6297 - val_accuracy: 0.6660\n","Epoch 3/5\n","14363/14363 [==============================] - 30s 2ms/step - loss: 0.6295 - accuracy: 0.6662 - val_loss: 0.6298 - val_accuracy: 0.6665\n","Epoch 4/5\n","14363/14363 [==============================] - 30s 2ms/step - loss: 0.6293 - accuracy: 0.6665 - val_loss: 0.6298 - val_accuracy: 0.6664\n","Epoch 5/5\n","14363/14363 [==============================] - 29s 2ms/step - loss: 0.6293 - accuracy: 0.6665 - val_loss: 0.6299 - val_accuracy: 0.6665\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","def show_loss_accuracy_evolution(history):\n","    \n","    hist = pd.DataFrame(history.history)\n","    hist['epoch'] = history.epoch\n","\n","    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))\n","\n","    ax1.set_xlabel('Epoch')\n","    ax1.set_ylabel('Sparse Categorical Crossentropy')\n","    ax1.plot(hist['epoch'], hist['loss'], label='Train Error')\n","    ax1.plot(hist['epoch'], hist['val_loss'], label = 'Val Error')\n","    ax1.grid()\n","    ax1.legend()\n","\n","    ax2.set_xlabel('Epoch')\n","    ax2.set_ylabel('Accuracy')\n","    ax2.plot(hist['epoch'], hist['accuracy'], label='Train Accuracy')\n","    ax2.plot(hist['epoch'], hist['val_accuracy'], label = 'Val Accuracy')\n","    ax2.grid()\n","    ax2.legend()\n","\n","    plt.show()\n","\n","show_loss_accuracy_evolution(history)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":388},"id":"sltJRWQ-_AH6","executionInfo":{"status":"ok","timestamp":1644066510467,"user_tz":-60,"elapsed":839,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"}},"outputId":"5765c1bd-301f-42c9-811d-a1cd0ea4ba49"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x432 with 2 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["# Categorical y precio"],"metadata":{"id":"PRtxs-kXaS5h"}},{"cell_type":"code","source":["X_trainu, X_validu, y_trainu, y_validu = train_test_split(df['user_type'].tolist(),\\\n","                                                      df['sold'].tolist(),\\\n","                                                      test_size=0.25,\\\n","                                                      stratify = df['sold'].tolist(),\\\n","                                                      random_state=0)"],"metadata":{"id":"P7SU96IrYV60"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_trainu=pd.DataFrame(X_trainu)"],"metadata":{"id":"aHjqvyS_ZnAk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.preprocessing import OneHotEncoder\n","\n","oe_style = OneHotEncoder()\n","oe_results = oe_style.fit_transform(X_trainu[[0]])\n"],"metadata":{"id":"6-rlcAGwYzR0"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_trainu= oe_results.toarray()"],"metadata":{"id":"8inRPC9mZeFh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["np.asarray(X_trainp).reshape(459602,1 )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FRIR1cbqdukg","executionInfo":{"status":"ok","timestamp":1644142006764,"user_tz":-60,"elapsed":229,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"}},"outputId":"1f3ed459-1080-497f-bb29-dfd394757bca"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ 24. ],\n","       [  4.8],\n","       [  4.8],\n","       ...,\n","       [108. ],\n","       [ 24. ],\n","       [ 27.6]])"]},"metadata":{},"execution_count":78}]},{"cell_type":"code","source":["X_trainu"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y0Zsx735aHTq","executionInfo":{"status":"ok","timestamp":1644140468935,"user_tz":-60,"elapsed":191,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"}},"outputId":"bdb4cccc-ea62-4d1b-9c59-25e46c1358e5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0., 1., 0.],\n","       [0., 1., 0.],\n","       [1., 0., 0.],\n","       ...,\n","       [0., 1., 0.],\n","       [0., 1., 0.],\n","       [0., 1., 0.]])"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["X_trainu = np.concatenate((X_trainu,np.asarray(X_trainp).reshape(459602,1 )),1)"],"metadata":{"id":"301e1Q7CcRxy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_trainu = np.asarray(y_trainu)"],"metadata":{"id":"WRvLx6pcaNuF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["utype_input = tf.keras.layers.Input(shape=(4, ), name='utype_input')\n","\n","layer_1 = layers.Dense(128, activation=\"relu\", name='layer_1')(utype_input)\n","outputs = layers.Dense(1, activation='sigmoid', name='output')(layer_1)\n","\n","\n","model = tf.keras.Model(inputs=utype_input, outputs=outputs, name='movie')\n","\n","model.summary()\n","model.compile(loss='BinaryCrossentropy',\n","              optimizer='adam',\n","              metrics=['accuracy'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2pQ2dXeAad1D","executionInfo":{"status":"ok","timestamp":1644142085559,"user_tz":-60,"elapsed":221,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"}},"outputId":"316f4d7a-566c-4d37-d139-e9da6807110b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"movie\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," utype_input (InputLayer)    [(None, 4)]               0         \n","                                                                 \n"," layer_1 (Dense)             (None, 128)               640       \n","                                                                 \n"," output (Dense)              (None, 1)                 129       \n","                                                                 \n","=================================================================\n","Total params: 769\n","Trainable params: 769\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["epochs = 5\n","# Fit the model using the train and test datasets.\n","#history = model.fit(x_train, train_labels,validation_data= (x_test,test_labels),epochs=epochs )\n","# Fit the model using the train and test datasets.\n","#history = model.fit(x_train, train_labels,validation_data= (x_test,test_labels),epochs=epochs )\n","history = model.fit(X_trainu, y_trainu,epochs=epochs )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LH0u6VRkbKT1","executionInfo":{"status":"ok","timestamp":1644142222546,"user_tz":-60,"elapsed":135477,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"}},"outputId":"28f7e59e-d443-475b-ed35-2d68c13d9f68"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n","14363/14363 [==============================] - 27s 2ms/step - loss: 0.6494 - accuracy: 0.6572\n","Epoch 2/5\n","14363/14363 [==============================] - 26s 2ms/step - loss: 0.6373 - accuracy: 0.6606\n","Epoch 3/5\n","14363/14363 [==============================] - 27s 2ms/step - loss: 0.6305 - accuracy: 0.6614\n","Epoch 4/5\n","14363/14363 [==============================] - 29s 2ms/step - loss: 0.6255 - accuracy: 0.6647\n","Epoch 5/5\n","14363/14363 [==============================] - 26s 2ms/step - loss: 0.6243 - accuracy: 0.6660\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","def show_loss_accuracy_evolution(history):\n","    \n","    hist = pd.DataFrame(history.history)\n","    hist['epoch'] = history.epoch\n","\n","    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))\n","\n","    ax1.set_xlabel('Epoch')\n","    ax1.set_ylabel('Sparse Categorical Crossentropy')\n","    ax1.plot(hist['epoch'], hist['loss'], label='Train Error')\n","    ax1.plot(hist['epoch'], hist['val_loss'], label = 'Val Error')\n","    ax1.grid()\n","    ax1.legend()\n","\n","    ax2.set_xlabel('Epoch')\n","    ax2.set_ylabel('Accuracy')\n","    ax2.plot(hist['epoch'], hist['accuracy'], label='Train Accuracy')\n","    ax2.plot(hist['epoch'], hist['val_accuracy'], label = 'Val Accuracy')\n","    ax2.grid()\n","    ax2.legend()\n","\n","    plt.show()\n","\n","show_loss_accuracy_evolution(history)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":877},"id":"OiYyFUN7cFE-","executionInfo":{"status":"error","timestamp":1644140978448,"user_tz":-60,"elapsed":1253,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"}},"outputId":"718621fc-a5a4-4205-d9c9-a8b911db17f3"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3360\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3361\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3362\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'val_loss'","\nThe above exception was the direct cause of the following exception:\n","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-33-095652dcb271>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     23\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 25\u001b[0;31m \u001b[0mshow_loss_accuracy_evolution\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhistory\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-33-095652dcb271>\u001b[0m in \u001b[0;36mshow_loss_accuracy_evolution\u001b[0;34m(history)\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0max1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_ylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Sparse Categorical Crossentropy'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m     \u001b[0max1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'epoch'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhist\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'loss'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'Train Error'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m     \u001b[0max1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mhist\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'epoch'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhist\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'val_loss'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'Val Error'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m     \u001b[0max1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgrid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m     \u001b[0max1\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlegend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3456\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3457\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3458\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3459\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3460\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3361\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3362\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3363\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3364\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3365\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mis_scalar\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0misna\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhasnans\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: 'val_loss'"]},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 1152x432 with 2 Axes>"]},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["predictions = model.predict(X_trainu)"],"metadata":{"id":"B__yfN7sh-i8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","conf_matrix = tf.math.confusion_matrix(labels=y_trainu,\n","                                       predictions=predictions)"],"metadata":{"id":"m13XB281iGEM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["(predictions > 0.5) == True"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BEfAEkuHi9qZ","executionInfo":{"status":"ok","timestamp":1644142836716,"user_tz":-60,"elapsed":303,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"}},"outputId":"6787ddbe-f743-4fac-84a2-fbfb91c492f5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[False],\n","       [False],\n","       [False],\n","       ...,\n","       [False],\n","       [False],\n","       [False]])"]},"metadata":{},"execution_count":98}]},{"cell_type":"code","source":["conf_matrix"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jWpCgJhniLiT","executionInfo":{"status":"ok","timestamp":1644142751931,"user_tz":-60,"elapsed":12,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"}},"outputId":"51effe60-f812-4b2f-afa8-a84a9d8e0a5b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor: shape=(2, 2), dtype=int32, numpy=\n","array([[306091,      0],\n","       [153511,      0]], dtype=int32)>"]},"metadata":{},"execution_count":92}]},{"cell_type":"markdown","source":["# Todo"],"metadata":{"id":"ILWDJ5Ap-7yn"}},{"cell_type":"code","source":["X_train1, X_valid1, y_train1, y_valid1 = train_test_split(df['Titulo'].tolist(),\\\n","                                                      df['sold'].tolist(),\\\n","                                                      test_size=0.25,\\\n","                                                      stratify = df['sold'].tolist(),\\\n","                                                      random_state=0)\n","\n","X_train2, X_valid2, y_train2, y_valid2 = train_test_split(df['Descripcion'].tolist(),\\\n","                                                      df['sold'].tolist(),\\\n","                                                      test_size=0.25,\\\n","                                                      stratify = df['sold'].tolist(),\\\n","                                                      random_state=0)\n","\n","X_trainp, X_validp, y_trainp, y_validp = train_test_split(df['price'].tolist(),\\\n","                                                      df['sold'].tolist(),\\\n","                                                      test_size=0.25,\\\n","                                                      stratify = df['sold'].tolist(),\\\n","                                                      random_state=0)\n","X_trainu, X_validu, y_trainu, y_validu = train_test_split(df['user_type'].tolist(),\\\n","                                                      df['sold'].tolist(),\\\n","                                                      test_size=0.25,\\\n","                                                      stratify = df['sold'].tolist(),\\\n","                                                      random_state=0)"],"metadata":{"id":"csojeZIl-7jX","executionInfo":{"status":"ok","timestamp":1644840488759,"user_tz":-60,"elapsed":3354,"user":{"displayName":"Ignacio Esplugues","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgCep0Hg7lhNSzfiPq203jW5skF0VO_1lqfA8OkLA=s64","userId":"01341933973910047413"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["num_words = 50000\n","\n","tokenizer1 = Tokenizer(num_words=num_words)\n","tokenizer1.fit_on_texts(X_train1)\n","tokenizer2 = Tokenizer(num_words=num_words)\n","tokenizer2.fit_on_texts(X_train2)"],"metadata":{"id":"dJ1_jKsJ_KBw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x_train1 = np.array( tokenizer1.texts_to_sequences(X_train1) )\n","x_valid1 = np.array( tokenizer1.texts_to_sequences(X_valid1) )\n","\n","\n","x_train1 = pad_sequences(x_train1, padding='post', maxlen=50)\n","x_valid1 = pad_sequences(x_valid1, padding='post', maxlen=50)\n","\n","\n","\n","train_labels1 = np.asarray(y_train1 )\n","valid_labels1 = np.asarray( y_valid1)\n","\n","\n","train_ds1 = tf.data.Dataset.from_tensor_slices((x_train1,train_labels1))\n","valid_ds1 = tf.data.Dataset.from_tensor_slices((x_valid1,valid_labels1))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0mydZWkM_VaP","executionInfo":{"status":"ok","timestamp":1644485220847,"user_tz":-60,"elapsed":10333,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"}},"outputId":"a0c247d7-2272-4ee1-81b3-8ba6f163391a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  \"\"\"Entry point for launching an IPython kernel.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  \n"]}]},{"cell_type":"code","source":["x_train2 = np.array( tokenizer2.texts_to_sequences(X_train2) )\n","x_valid2 = np.array( tokenizer2.texts_to_sequences(X_valid2) )\n","\n","\n","x_train2 = pad_sequences(x_train2, padding='post', maxlen=100)\n","x_valid2 = pad_sequences(x_valid2, padding='post', maxlen=100)\n","\n","\n","\n","train_labels2 = np.asarray(y_train2 )\n","valid_labels2 = np.asarray( y_valid2)\n","\n","\n","train_ds2 = tf.data.Dataset.from_tensor_slices((x_train2,train_labels2))\n","valid_ds2 = tf.data.Dataset.from_tensor_slices((x_valid2,valid_labels2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cuc6JMsp_WUH","executionInfo":{"status":"ok","timestamp":1644485245043,"user_tz":-60,"elapsed":24226,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"}},"outputId":"511673c6-1d23-42fb-b16c-30206232b46e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  \"\"\"Entry point for launching an IPython kernel.\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:2: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray\n","  \n"]}]},{"cell_type":"code","source":["x_trainp = np.asarray(X_trainp)\n","x_validp = np.asarray(X_validp)\n","train_labelsp = np.asarray(y_trainp )\n","valid_labelsp = np.asarray( y_validp)"],"metadata":{"id":"eJMfIvUkimMy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_trainu=pd.DataFrame(X_trainu)\n","from sklearn.preprocessing import OneHotEncoder\n","\n","oe_style = OneHotEncoder()\n","oe_results = oe_style.fit_transform(X_trainu[[0]])\n","X_trainu= oe_results.toarray()"],"metadata":{"id":"qCeVK6hfiTQC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["x_train_v = np.concatenate((X_trainu,np.asarray(X_trainp).reshape(459602,1 )),1)"],"metadata":{"id":"qoAa7lKribaA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["max_features =50000\n","embedding_dim =16\n","sequence_length = 100\n","\n","user_input = tf.keras.layers.Input(shape=(50, ), name='user_input')\n","user_embedding = layers.Embedding(max_features +1, embedding_dim, input_length=50)(user_input)\n","\n","\n","## movie embeddings\n","movie_input = tf.keras.layers.Input(shape=(100, ), name='movie_input')\n","movie_embedding = layers.Embedding(max_features +1, embedding_dim, input_length=sequence_length)(movie_input)\n","\n","\n","precio_input = tf.keras.layers.Input(shape=(4, ), name='precio_input')\n","layer_precio = layers.Dense(128, activation=\"relu\", name='layer_precio')(precio_input)\n","\n","\n","concat = tf.concat([user_embedding, movie_embedding], axis=1)\n","\n","\n","layer_1 = layers.Dense(128, activation=\"relu\", name='layer_1')(concat)\n","layer_2 = tf.keras.layers.Flatten()(layer_1)\n","\n","\n","concat2 = tf.concat([layer_2, layer_precio], axis=1)\n","layer_3 = layers.Dense(128, activation=\"relu\", name='layer_3')(concat2)\n","\n","\n","## Predict rating\n","outputs = layers.Dense(1, activation='sigmoid', name='output')(layer_3)\n","\n","\n","model = tf.keras.Model(inputs=[user_input,movie_input,precio_input], outputs=outputs, name='movie')\n","\n","model.summary()\n","model.compile(loss='BinaryCrossentropy',\n","              optimizer='adam',\n","              metrics=['accuracy'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"th2lGgxG_lkm","executionInfo":{"status":"ok","timestamp":1644485245725,"user_tz":-60,"elapsed":244,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"}},"outputId":"21fe09d8-1ba2-45b1-e295-64e83e5949ec"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"movie\"\n","__________________________________________________________________________________________________\n"," Layer (type)                   Output Shape         Param #     Connected to                     \n","==================================================================================================\n"," user_input (InputLayer)        [(None, 100)]        0           []                               \n","                                                                                                  \n"," movie_input (InputLayer)       [(None, 100)]        0           []                               \n","                                                                                                  \n"," embedding_22 (Embedding)       (None, 100, 16)      800016      ['user_input[0][0]']             \n","                                                                                                  \n"," embedding_23 (Embedding)       (None, 100, 16)      800016      ['movie_input[0][0]']            \n","                                                                                                  \n"," tf.concat_22 (TFOpLambda)      (None, 200, 16)      0           ['embedding_22[0][0]',           \n","                                                                  'embedding_23[0][0]']           \n","                                                                                                  \n"," layer_1 (Dense)                (None, 200, 128)     2176        ['tf.concat_22[0][0]']           \n","                                                                                                  \n"," precio_input (InputLayer)      [(None, 4)]          0           []                               \n","                                                                                                  \n"," flatten_11 (Flatten)           (None, 25600)        0           ['layer_1[0][0]']                \n","                                                                                                  \n"," layer_precio (Dense)           (None, 128)          640         ['precio_input[0][0]']           \n","                                                                                                  \n"," tf.concat_23 (TFOpLambda)      (None, 25728)        0           ['flatten_11[0][0]',             \n","                                                                  'layer_precio[0][0]']           \n","                                                                                                  \n"," layer_3 (Dense)                (None, 128)          3293312     ['tf.concat_23[0][0]']           \n","                                                                                                  \n"," output (Dense)                 (None, 1)            129         ['layer_3[0][0]']                \n","                                                                                                  \n","==================================================================================================\n","Total params: 4,896,289\n","Trainable params: 4,896,289\n","Non-trainable params: 0\n","__________________________________________________________________________________________________\n"]}]},{"cell_type":"code","source":["epochs = 1\n","# Fit the model using the train and test datasets.\n","#history = model.fit(x_train, train_labels,validation_data= (x_test,test_labels),epochs=epochs )\n","# Fit the model using the train and test datasets.\n","#history = model.fit(x_train, train_labels,validation_data= (x_test,test_labels),epochs=epochs )\n","history = model.fit([x_train1,x_train2, x_train_v], train_labels2, \n","                    epochs= epochs )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8gfVgjKUAIjg","executionInfo":{"status":"ok","timestamp":1644485934941,"user_tz":-60,"elapsed":689227,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"}},"outputId":"6410ee14-bc0f-4fc1-9086-8d218908b5d9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["14363/14363 [==============================] - 689s 48ms/step - loss: 0.5717 - accuracy: 0.7099\n"]}]},{"cell_type":"markdown","source":["# Ejemplo cargar y prediccion modelo"],"metadata":{"id":"cTLSdV3_TRU5"}},{"cell_type":"markdown","source":["## librerias y funciones"],"metadata":{"id":"HLnT_Q1xlkK9"}},{"cell_type":"code","source":["import matplotlib as mpl\n","import matplotlib.pyplot as plt\n","import os\n","import re\n","import shutil\n","import string\n","import tensorflow as tf\n","from tensorflow.keras import regularizers\n","\n","from tensorflow.keras import layers\n","from tensorflow.keras import losses\n","\n","from collections import Counter\n","\n","\n","import pandas as pd\n","import numpy as np\n","\n","import sklearn\n","\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report\n","\n","from tensorflow.keras import preprocessing\n","from tensorflow.keras.preprocessing.text import Tokenizer\n","from tensorflow.keras.preprocessing.sequence import pad_sequences\n","\n","\n","import seaborn as sns\n","\n","import pydot"],"metadata":{"id":"LcZ7sL2Ntf3C"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import tensorflow as tf\n","import matplotlib.pyplot as plt"],"metadata":{"id":"w51RRl9utkFC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#%%capture\n","import pandas as pd\n","import nltk\n","!pip install -U spacy\n","!pip install --upgrade spacy\n","import spacy\n","import numpy as np\n","import scipy as sp\n","from nltk.corpus import stopwords\n","from nltk.tokenize import sent_tokenize, word_tokenize\n","\n","nltk.download('stopwords')\n","stop_words = stopwords.words('russian')\n","nltk.download('punkt')\n","!python -m spacy download ru_core_news_md\n","nlp = spacy.load('ru_core_news_md')\n","import string\n","puntuacion = list(string.punctuation)\n","puntuacion.append(\" \")\n","\n","from sklearn.feature_extraction.text import CountVectorizer, TfidfVectorizer\n","\n","!pip install emoji_extractor\n","from emoji_extractor.extract import Extractor\n","import re\n","\n","# Download emoji sentiment\n","!wget https://www.clarin.si/repository/xmlui/handle/11356/1048/allzip\n","!unzip allzip\n","emoji_sent_dict = pd.read_csv(\"Emoji_Sentiment_Data_v1.0.csv\", sep = \",\")\n","\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import f1_score, confusion_matrix\n","from sklearn.metrics import classification_report\n","import scipy as sp\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.feature_selection import SelectKBest\n","from sklearn.pipeline import make_pipeline\n","from sklearn.model_selection import cross_val_score\n","from sklearn.feature_selection import chi2\n","from sklearn.model_selection import StratifiedKFold"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-vCMposDlofr","executionInfo":{"status":"ok","timestamp":1644411997555,"user_tz":-60,"elapsed":66710,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"}},"outputId":"f74ed15d-34e3-4390-b9cf-510667f052b7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: spacy in /usr/local/lib/python3.7/dist-packages (2.2.4)\n","Collecting spacy\n","  Downloading spacy-3.2.1-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (6.0 MB)\n","\u001b[K     |████████████████████████████████| 6.0 MB 5.4 MB/s \n","\u001b[?25hCollecting thinc<8.1.0,>=8.0.12\n","  Downloading thinc-8.0.13-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (628 kB)\n","\u001b[K     |████████████████████████████████| 628 kB 44.7 MB/s \n","\u001b[?25hCollecting srsly<3.0.0,>=2.4.1\n","  Downloading srsly-2.4.2-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (451 kB)\n","\u001b[K     |████████████████████████████████| 451 kB 43.6 MB/s \n","\u001b[?25hRequirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from spacy) (57.4.0)\n","Requirement already satisfied: wasabi<1.1.0,>=0.8.1 in /usr/local/lib/python3.7/dist-packages (from spacy) (0.9.0)\n","Requirement already satisfied: typing-extensions<4.0.0.0,>=3.7.4 in /usr/local/lib/python3.7/dist-packages (from spacy) (3.10.0.2)\n","Requirement already satisfied: numpy>=1.15.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (1.19.5)\n","Requirement already satisfied: blis<0.8.0,>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (0.4.1)\n","Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy) (2.0.6)\n","Collecting pathy>=0.3.5\n","  Downloading pathy-0.6.1-py3-none-any.whl (42 kB)\n","\u001b[K     |████████████████████████████████| 42 kB 1.2 MB/s \n","\u001b[?25hRequirement already satisfied: tqdm<5.0.0,>=4.38.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (4.62.3)\n","Collecting spacy-legacy<3.1.0,>=3.0.8\n","  Downloading spacy_legacy-3.0.8-py2.py3-none-any.whl (14 kB)\n","Collecting catalogue<2.1.0,>=2.0.6\n","  Downloading catalogue-2.0.6-py3-none-any.whl (17 kB)\n","Collecting spacy-loggers<2.0.0,>=1.0.0\n","  Downloading spacy_loggers-1.0.1-py3-none-any.whl (7.0 kB)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.7/dist-packages (from spacy) (2.11.3)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (21.3)\n","Collecting langcodes<4.0.0,>=3.2.0\n","  Downloading langcodes-3.3.0-py3-none-any.whl (181 kB)\n","\u001b[K     |████████████████████████████████| 181 kB 37.6 MB/s \n","\u001b[?25hCollecting typer<0.5.0,>=0.3.0\n","  Downloading typer-0.4.0-py3-none-any.whl (27 kB)\n","Requirement already satisfied: requests<3.0.0,>=2.13.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (2.23.0)\n","Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (1.0.6)\n","Collecting pydantic!=1.8,!=1.8.1,<1.9.0,>=1.7.4\n","  Downloading pydantic-1.8.2-cp37-cp37m-manylinux2014_x86_64.whl (10.1 MB)\n","\u001b[K     |████████████████████████████████| 10.1 MB 23.6 MB/s \n","\u001b[?25hRequirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy) (3.0.6)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from catalogue<2.1.0,>=2.0.6->spacy) (3.7.0)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging>=20.0->spacy) (3.0.7)\n","Requirement already satisfied: smart-open<6.0.0,>=5.0.0 in /usr/local/lib/python3.7/dist-packages (from pathy>=0.3.5->spacy) (5.2.1)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (2.10)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (3.0.4)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (2021.10.8)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (1.24.3)\n","Requirement already satisfied: click<9.0.0,>=7.1.1 in /usr/local/lib/python3.7/dist-packages (from typer<0.5.0,>=0.3.0->spacy) (7.1.2)\n","Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.7/dist-packages (from jinja2->spacy) (2.0.1)\n","Installing collected packages: catalogue, typer, srsly, pydantic, thinc, spacy-loggers, spacy-legacy, pathy, langcodes, spacy\n","  Attempting uninstall: catalogue\n","    Found existing installation: catalogue 1.0.0\n","    Uninstalling catalogue-1.0.0:\n","      Successfully uninstalled catalogue-1.0.0\n","  Attempting uninstall: srsly\n","    Found existing installation: srsly 1.0.5\n","    Uninstalling srsly-1.0.5:\n","      Successfully uninstalled srsly-1.0.5\n","  Attempting uninstall: thinc\n","    Found existing installation: thinc 7.4.0\n","    Uninstalling thinc-7.4.0:\n","      Successfully uninstalled thinc-7.4.0\n","  Attempting uninstall: spacy\n","    Found existing installation: spacy 2.2.4\n","    Uninstalling spacy-2.2.4:\n","      Successfully uninstalled spacy-2.2.4\n","Successfully installed catalogue-2.0.6 langcodes-3.3.0 pathy-0.6.1 pydantic-1.8.2 spacy-3.2.1 spacy-legacy-3.0.8 spacy-loggers-1.0.1 srsly-2.4.2 thinc-8.0.13 typer-0.4.0\n","Requirement already satisfied: spacy in /usr/local/lib/python3.7/dist-packages (3.2.1)\n","Requirement already satisfied: pathy>=0.3.5 in /usr/local/lib/python3.7/dist-packages (from spacy) (0.6.1)\n","Requirement already satisfied: numpy>=1.15.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (1.19.5)\n","Requirement already satisfied: thinc<8.1.0,>=8.0.12 in /usr/local/lib/python3.7/dist-packages (from spacy) (8.0.13)\n","Requirement already satisfied: langcodes<4.0.0,>=3.2.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (3.3.0)\n","Requirement already satisfied: pydantic!=1.8,!=1.8.1,<1.9.0,>=1.7.4 in /usr/local/lib/python3.7/dist-packages (from spacy) (1.8.2)\n","Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (1.0.6)\n","Requirement already satisfied: spacy-loggers<2.0.0,>=1.0.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (1.0.1)\n","Requirement already satisfied: tqdm<5.0.0,>=4.38.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (4.62.3)\n","Requirement already satisfied: requests<3.0.0,>=2.13.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (2.23.0)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.7/dist-packages (from spacy) (2.11.3)\n","Requirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy) (3.0.6)\n","Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy) (2.0.6)\n","Requirement already satisfied: typer<0.5.0,>=0.3.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (0.4.0)\n","Requirement already satisfied: spacy-legacy<3.1.0,>=3.0.8 in /usr/local/lib/python3.7/dist-packages (from spacy) (3.0.8)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (21.3)\n","Requirement already satisfied: catalogue<2.1.0,>=2.0.6 in /usr/local/lib/python3.7/dist-packages (from spacy) (2.0.6)\n","Requirement already satisfied: wasabi<1.1.0,>=0.8.1 in /usr/local/lib/python3.7/dist-packages (from spacy) (0.9.0)\n","Requirement already satisfied: typing-extensions<4.0.0.0,>=3.7.4 in /usr/local/lib/python3.7/dist-packages (from spacy) (3.10.0.2)\n","Requirement already satisfied: blis<0.8.0,>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy) (0.4.1)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from spacy) (57.4.0)\n","Requirement already satisfied: srsly<3.0.0,>=2.4.1 in /usr/local/lib/python3.7/dist-packages (from spacy) (2.4.2)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from catalogue<2.1.0,>=2.0.6->spacy) (3.7.0)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging>=20.0->spacy) (3.0.7)\n","Requirement already satisfied: smart-open<6.0.0,>=5.0.0 in /usr/local/lib/python3.7/dist-packages (from pathy>=0.3.5->spacy) (5.2.1)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (1.24.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (2021.10.8)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (3.0.4)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy) (2.10)\n","Requirement already satisfied: click<9.0.0,>=7.1.1 in /usr/local/lib/python3.7/dist-packages (from typer<0.5.0,>=0.3.0->spacy) (7.1.2)\n","Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.7/dist-packages (from jinja2->spacy) (2.0.1)\n","[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/stopwords.zip.\n","[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n","Collecting ru-core-news-md==3.2.0\n","  Downloading https://github.com/explosion/spacy-models/releases/download/ru_core_news_md-3.2.0/ru_core_news_md-3.2.0-py3-none-any.whl (43.0 MB)\n","\u001b[K     |████████████████████████████████| 43.0 MB 1.9 MB/s \n","\u001b[?25hRequirement already satisfied: spacy<3.3.0,>=3.2.0 in /usr/local/lib/python3.7/dist-packages (from ru-core-news-md==3.2.0) (3.2.1)\n","Collecting pymorphy2>=0.9\n","  Downloading pymorphy2-0.9.1-py3-none-any.whl (55 kB)\n","\u001b[K     |████████████████████████████████| 55 kB 2.2 MB/s \n","\u001b[?25hRequirement already satisfied: docopt>=0.6 in /usr/local/lib/python3.7/dist-packages (from pymorphy2>=0.9->ru-core-news-md==3.2.0) (0.6.2)\n","Collecting pymorphy2-dicts-ru<3.0,>=2.4\n","  Downloading pymorphy2_dicts_ru-2.4.417127.4579844-py2.py3-none-any.whl (8.2 MB)\n","\u001b[K     |████████████████████████████████| 8.2 MB 8.5 MB/s \n","\u001b[?25hCollecting dawg-python>=0.7.1\n","  Downloading DAWG_Python-0.7.2-py2.py3-none-any.whl (11 kB)\n","Requirement already satisfied: langcodes<4.0.0,>=3.2.0 in /usr/local/lib/python3.7/dist-packages (from spacy<3.3.0,>=3.2.0->ru-core-news-md==3.2.0) (3.3.0)\n","Requirement already satisfied: catalogue<2.1.0,>=2.0.6 in /usr/local/lib/python3.7/dist-packages (from spacy<3.3.0,>=3.2.0->ru-core-news-md==3.2.0) (2.0.6)\n","Requirement already satisfied: spacy-loggers<2.0.0,>=1.0.0 in /usr/local/lib/python3.7/dist-packages (from spacy<3.3.0,>=3.2.0->ru-core-news-md==3.2.0) (1.0.1)\n","Requirement already satisfied: preshed<3.1.0,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy<3.3.0,>=3.2.0->ru-core-news-md==3.2.0) (3.0.6)\n","Requirement already satisfied: numpy>=1.15.0 in /usr/local/lib/python3.7/dist-packages (from spacy<3.3.0,>=3.2.0->ru-core-news-md==3.2.0) (1.19.5)\n","Requirement already satisfied: jinja2 in /usr/local/lib/python3.7/dist-packages (from spacy<3.3.0,>=3.2.0->ru-core-news-md==3.2.0) (2.11.3)\n","Requirement already satisfied: blis<0.8.0,>=0.4.0 in /usr/local/lib/python3.7/dist-packages (from spacy<3.3.0,>=3.2.0->ru-core-news-md==3.2.0) (0.4.1)\n","Requirement already satisfied: cymem<2.1.0,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from spacy<3.3.0,>=3.2.0->ru-core-news-md==3.2.0) (2.0.6)\n","Requirement already satisfied: requests<3.0.0,>=2.13.0 in /usr/local/lib/python3.7/dist-packages (from spacy<3.3.0,>=3.2.0->ru-core-news-md==3.2.0) (2.23.0)\n","Requirement already satisfied: typing-extensions<4.0.0.0,>=3.7.4 in /usr/local/lib/python3.7/dist-packages (from spacy<3.3.0,>=3.2.0->ru-core-news-md==3.2.0) (3.10.0.2)\n","Requirement already satisfied: spacy-legacy<3.1.0,>=3.0.8 in /usr/local/lib/python3.7/dist-packages (from spacy<3.3.0,>=3.2.0->ru-core-news-md==3.2.0) (3.0.8)\n","Requirement already satisfied: murmurhash<1.1.0,>=0.28.0 in /usr/local/lib/python3.7/dist-packages (from spacy<3.3.0,>=3.2.0->ru-core-news-md==3.2.0) (1.0.6)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.7/dist-packages (from spacy<3.3.0,>=3.2.0->ru-core-news-md==3.2.0) (21.3)\n","Requirement already satisfied: pydantic!=1.8,!=1.8.1,<1.9.0,>=1.7.4 in /usr/local/lib/python3.7/dist-packages (from spacy<3.3.0,>=3.2.0->ru-core-news-md==3.2.0) (1.8.2)\n","Requirement already satisfied: typer<0.5.0,>=0.3.0 in /usr/local/lib/python3.7/dist-packages (from spacy<3.3.0,>=3.2.0->ru-core-news-md==3.2.0) (0.4.0)\n","Requirement already satisfied: pathy>=0.3.5 in /usr/local/lib/python3.7/dist-packages (from spacy<3.3.0,>=3.2.0->ru-core-news-md==3.2.0) (0.6.1)\n","Requirement already satisfied: setuptools in /usr/local/lib/python3.7/dist-packages (from spacy<3.3.0,>=3.2.0->ru-core-news-md==3.2.0) (57.4.0)\n","Requirement already satisfied: wasabi<1.1.0,>=0.8.1 in /usr/local/lib/python3.7/dist-packages (from spacy<3.3.0,>=3.2.0->ru-core-news-md==3.2.0) (0.9.0)\n","Requirement already satisfied: srsly<3.0.0,>=2.4.1 in /usr/local/lib/python3.7/dist-packages (from spacy<3.3.0,>=3.2.0->ru-core-news-md==3.2.0) (2.4.2)\n","Requirement already satisfied: thinc<8.1.0,>=8.0.12 in /usr/local/lib/python3.7/dist-packages (from spacy<3.3.0,>=3.2.0->ru-core-news-md==3.2.0) (8.0.13)\n","Requirement already satisfied: tqdm<5.0.0,>=4.38.0 in /usr/local/lib/python3.7/dist-packages (from spacy<3.3.0,>=3.2.0->ru-core-news-md==3.2.0) (4.62.3)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from catalogue<2.1.0,>=2.0.6->spacy<3.3.0,>=3.2.0->ru-core-news-md==3.2.0) (3.7.0)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging>=20.0->spacy<3.3.0,>=3.2.0->ru-core-news-md==3.2.0) (3.0.7)\n","Requirement already satisfied: smart-open<6.0.0,>=5.0.0 in /usr/local/lib/python3.7/dist-packages (from pathy>=0.3.5->spacy<3.3.0,>=3.2.0->ru-core-news-md==3.2.0) (5.2.1)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.3.0,>=3.2.0->ru-core-news-md==3.2.0) (3.0.4)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.3.0,>=3.2.0->ru-core-news-md==3.2.0) (2.10)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.3.0,>=3.2.0->ru-core-news-md==3.2.0) (1.24.3)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests<3.0.0,>=2.13.0->spacy<3.3.0,>=3.2.0->ru-core-news-md==3.2.0) (2021.10.8)\n","Requirement already satisfied: click<9.0.0,>=7.1.1 in /usr/local/lib/python3.7/dist-packages (from typer<0.5.0,>=0.3.0->spacy<3.3.0,>=3.2.0->ru-core-news-md==3.2.0) (7.1.2)\n","Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.7/dist-packages (from jinja2->spacy<3.3.0,>=3.2.0->ru-core-news-md==3.2.0) (2.0.1)\n","Installing collected packages: pymorphy2-dicts-ru, dawg-python, pymorphy2, ru-core-news-md\n","Successfully installed dawg-python-0.7.2 pymorphy2-0.9.1 pymorphy2-dicts-ru-2.4.417127.4579844 ru-core-news-md-3.2.0\n","\u001b[38;5;2m✔ Download and installation successful\u001b[0m\n","You can now load the package via spacy.load('ru_core_news_md')\n","Collecting emoji_extractor\n","  Downloading emoji_extractor-1.0.19.tar.gz (33 kB)\n","Building wheels for collected packages: emoji-extractor\n","  Building wheel for emoji-extractor (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for emoji-extractor: filename=emoji_extractor-1.0.19-py3-none-any.whl size=61587 sha256=81dcecfe191b5539ce5a226702bfda4d75eecc4a56d3254031b764a52af17609\n","  Stored in directory: /root/.cache/pip/wheels/80/36/27/754da09d2a38916a9099ab8ea09688aba2f52c397ce78121ce\n","Successfully built emoji-extractor\n","Installing collected packages: emoji-extractor\n","Successfully installed emoji-extractor-1.0.19\n","--2022-02-09 13:06:56--  https://www.clarin.si/repository/xmlui/handle/11356/1048/allzip\n","Resolving www.clarin.si (www.clarin.si)... 95.87.154.205\n","Connecting to www.clarin.si (www.clarin.si)|95.87.154.205|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: unspecified [application/zip]\n","Saving to: ‘allzip’\n","\n","allzip                  [  <=>               ]  94.61K   408KB/s    in 0.2s    \n","\n","2022-02-09 13:06:57 (408 KB/s) - ‘allzip’ saved [96878]\n","\n","Archive:  allzip\n","  inflating: ESR_v1.0_format.txt     \n","  inflating: Emoji_Sentiment_Data_v1.0.csv  \n","  inflating: Emojitracker_20150604.csv  \n"]}]},{"cell_type":"code","source":["import keras\n","import pickle"],"metadata":{"id":"Oesq6pDrAOPs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["%%capture\n","# En primer lugar limpiamos los emojis de las descripciones\n","def limpia_emoji(text):\n","    emoji_pattern = re.compile('['\n","        u'\\U0001F300-\\U0001F6FF' u'\\U0001F1E0-\\U0001F1FF' u'\\u2600-\\u26FF\\u2700-\\u27BF'\n","        u'\\u2934' u'\\u2935' u'\\u2B05' u'\\u2B06' u'\\u2B07' u'\\u2B1C' u'\\u2B1B'\n","        u'\\u2B50' u'\\u2B55' u'\\u3030' u'\\u303D' u'\\u3297' u'\\u3299' u'\\u00A9'\n","        u'\\u00AE' u'\\u203C' u'\\u2049' u'\\u2122' u'\\u2139' u'\\u2194-\\u2199' \n","        u'\\u21A9' u'\\u21AA' u'\\u231A' u'\\u231B' u'\\u2328' u'\\u23CF'\n","        u'\\u23E9-\\u23F3' u'\\u23F8' u'\\u23F9' u'\\u23FA' u'\\u24C2' u'\\u25AA'\n","        u'\\u25AB' u'\\u25B6' u'\\u25C0' u'\\u25FB' u'\\u25FD' u'\\u25FC' u'\\u25FE'\n","        ']+', flags = re.UNICODE)\n","    str2 = re.sub(emoji_pattern, r' ', text)\n","    return str2"],"metadata":{"id":"tSP3k27rl0ql"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Eliminar espacios\n","def eliminar_espacios(text): \n","    return  \" \".join(text.split()) \n","\n","# To lower\n","def texto_to_lower(text):\n","  return text.lower()\n","\n","# Tokenizador\n","def tokenization(text):\n","  tokens = word_tokenize(text)\n","  return tokens\n","\n","# Quitar stop words\n","def quitar_stopwords(tokens):\n","    filtered_sentence = [w for w in tokens if not w in stop_words]\n","    return filtered_sentence\n","\n","# Eliminar signos de puntuación\n","def quitar_puntuacion(tokens):\n","    words=[word for word in tokens if word.isalnum()]\n","    return words\n","\n","# Lemmatization\n","def lematizar(tokens):\n","    sentence = \" \".join(tokens)\n","    mytokens = nlp(sentence)\n","    # Lematizamos los tokens y los convertimos  a minusculas\n","    mytokens = [ word.lemma_ if word.lemma_ != \"-PRON-\" else word.lower_ for word in mytokens ]\n","    # Extraemos el text en una string\n","    return \" \".join(mytokens)\n","\n","def quitar_numeros(tokens):\n","  sin_numeros=[w for w in tokens if w.isnumeric()==False]\n","  return sin_numeros"],"metadata":{"id":"cnZL9-E4l5H0"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## ejemplo"],"metadata":{"id":"aNhUo9tHluo8"}},{"cell_type":"code","source":["modelo = keras.models.load_model('/content/drive/MyDrive/TFM Big Data & BA/Propuestas/Proyecto Final/2 - Text Mining/textmining_model.h5')\n","onehot = joblib.load('/content/drive/MyDrive/TFM Big Data & BA/Propuestas/Proyecto Final/2 - Text Mining/modelo_onehot.pkl')\n","with open('/content/drive/MyDrive/TFM Big Data & BA/Propuestas/Proyecto Final/2 - Text Mining/tokenizer1.pickle', 'rb') as handle:\n","    tokenizer_titulos = pickle.load(handle)\n","with open('/content/drive/MyDrive/TFM Big Data & BA/Propuestas/Proyecto Final/2 - Text Mining/tokenizer2.pickle', 'rb') as handle:\n","    tokenizer_descripcion = pickle.load(handle)\n","  "],"metadata":{"id":"GHTkyahY_z7p"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["ejemplo = pd.DataFrame()"],"metadata":{"id":"p1ADT-hVTk-M"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["ejemplo[\"Descripcion\"] = [\"хороший сотояние\"]\n","ejemplo[\"Titulo\"] = [\"чехол гитара\"]\n","ejemplo[\"Price\"] = [6000]\n","ejemplo[\"user_type\"] = [\"Private\"]"],"metadata":{"id":"rmKEkkigW8RT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["ejemplo"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":81},"id":"TIGQ3nt-Xw4A","executionInfo":{"status":"ok","timestamp":1644408409198,"user_tz":-60,"elapsed":13,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"}},"outputId":"1430a9a7-9525-4db2-f3dc-b16664a67863"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["\n","  <div id=\"df-feb45090-52ed-47e3-afc6-931690cb8a82\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Descripcion</th>\n","      <th>Titulo</th>\n","      <th>Price</th>\n","      <th>user_type</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>хороший сотояние</td>\n","      <td>чехол гитара</td>\n","      <td>6000</td>\n","      <td>Private</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-feb45090-52ed-47e3-afc6-931690cb8a82')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-feb45090-52ed-47e3-afc6-931690cb8a82 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-feb45090-52ed-47e3-afc6-931690cb8a82');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "],"text/plain":["        Descripcion        Titulo  Price user_type\n","0  хороший сотояние  чехол гитара   6000   Private"]},"metadata":{},"execution_count":70}]},{"cell_type":"code","source":["onehot_results = onehot.transform(ejemplo[[\"user_type\"]])\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uYDvQ2K9YhK7","executionInfo":{"status":"ok","timestamp":1644410336411,"user_tz":-60,"elapsed":12,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"}},"outputId":"ca1c49ec-01c5-48a9-c204-dba4c196a6d1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/sklearn/base.py:444: UserWarning: X has feature names, but OneHotEncoder was fitted without feature names\n","  f\"X has feature names, but {self.__class__.__name__} was fitted without\"\n"]}]},{"cell_type":"code","source":["X_test_oh = onehot_results.toarray()"],"metadata":{"id":"lexTy57WdV28"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_test_p = np.asarray(ejemplo[\"Price\"])"],"metadata":{"id":"M1cPBCFYgIg-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_test_v = np.concatenate((X_test_oh,X_test_p.reshape(len(X_test_p),1 )),1)"],"metadata":{"id":"r0uleYsfswz8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["ejemplo[\"normaliza_descripcion\"] = ejemplo[\"Descripcion\"].apply(lambda x: eliminar_espacios(x))\n","# Pasamos a minúscula\n","ejemplo[\"normaliza_descripcion\"] = ejemplo[\"normaliza_descripcion\"].apply(lambda x: texto_to_lower(x))\n","# Tokenizar\n","ejemplo[\"normaliza_descripcion\"] = ejemplo[\"normaliza_descripcion\"].apply(lambda x: tokenization(x))\n","# Quitar Stopwords\n","ejemplo[\"normaliza_descripcion\"] = ejemplo[\"normaliza_descripcion\"].apply(lambda x: quitar_stopwords(x))\n","# Quitar puntuación\n","ejemplo[\"normaliza_descripcion\"] = ejemplo[\"normaliza_descripcion\"].apply(lambda x: quitar_puntuacion(x))\n","# Quitar números\n","ejemplo[\"normaliza_descripcion\"] = ejemplo[\"normaliza_descripcion\"].apply(lambda x: quitar_numeros(x))\n","# Lematizamos\n","ejemplo[\"normaliza_descripcion\"] = ejemplo[\"normaliza_descripcion\"].apply(lambda x: lematizar(x))"],"metadata":{"id":"O3jZoZCjgPZm"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["ejemplo[\"normaliza_titulo\"] = ejemplo[\"Titulo\"].apply(lambda x: eliminar_espacios(x))\n","# Pasamos a minúscula\n","ejemplo[\"normaliza_titulo\"] = ejemplo[\"normaliza_titulo\"].apply(lambda x: texto_to_lower(x))\n","# Tokenizar\n","ejemplo[\"normaliza_titulo\"] = ejemplo[\"normaliza_titulo\"].apply(lambda x: tokenization(x))\n","# Quitar Stopwords\n","ejemplo[\"normaliza_titulo\"] = ejemplo[\"normaliza_titulo\"].apply(lambda x: quitar_stopwords(x))\n","# Quitar puntuación\n","ejemplo[\"normaliza_titulo\"] = ejemplo[\"normaliza_titulo\"].apply(lambda x: quitar_puntuacion(x))\n","# Quitar números\n","ejemplo[\"normaliza_titulo\"] = ejemplo[\"normaliza_titulo\"].apply(lambda x: quitar_numeros(x))\n","# Lematizamos\n","ejemplo[\"normaliza_titulo\"] = ejemplo[\"normaliza_titulo\"].apply(lambda x: lematizar(x))"],"metadata":{"id":"YJx2fHJNme07"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_test_ti =np.array(tokenizer_titulos.texts_to_sequences(ejemplo[\"normaliza_titulo\"]) )\n","X_test_des =np.array(tokenizer_descripcion.texts_to_sequences(ejemplo[\"normaliza_descripcion\"]) )"],"metadata":{"id":"s_OzYhWImoBR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["X_test_ti = pad_sequences(X_test_ti, padding='post', maxlen=100)\n","X_test_des = pad_sequences(X_test_des, padding='post', maxlen=100)"],"metadata":{"id":"ttq28LVRsKcK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["modelo.predict([X_test_ti,X_test_des,X_test_v])[0][0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"selYEwiEsY4h","executionInfo":{"status":"ok","timestamp":1644413948346,"user_tz":-60,"elapsed":351,"user":{"displayName":"miguel Garcia","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"08308211240568740600"}},"outputId":"2edd92c5-d9aa-476c-f0aa-f238accf8bb7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.00217852"]},"metadata":{},"execution_count":152}]}]}